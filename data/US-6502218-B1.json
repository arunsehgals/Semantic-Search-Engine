etecting and correcting errors in the tag array using known methods (e.g. ECC) may disadvantageously increase cache read latency because a corrected tag entry can be required to determine whether requested data (e.g. an instruction, a data word, etc.) is present in the cache. For example, depending on the clock rates used and other design criteria of a CPU and the cache, performing ECC upon a tag entry can add an additional clock cycle of latency to a data request from the cache. When a cache access requires 5 clock cycles without performing ECC on a tag entry, then an additional clock cycle required for ECC can impose a twenty percent performance penalty upon cache access. In view of the foregoing, it can be appreciated that a substantial need exists for a method and system which can advantageously defer correction of detected errors in the tag array.</p><h4>SUMMARY OF THE INVENTION</h4><p>Embodiments of the present invention include methods and apparatus to defer correction of an error in a tag entry of a cache tag array. A cache can receive an address of requested data, including an address tag field. A first hit indication based at least in part on a comparison of the address tag field and a first tag entry can be generated. Based at least in part on the first hit indication, a first data entry of a data array can be output. An error in the tag entry can be detected, and the first data entry can be disregard based at least in part on the detected error.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 shows a known system for correcting errors in the TAG array of a cache.</p><p>FIG. 2 shows an apparatus in accordance with an embodiment of the present invention.</p><p>FIG. 3 shows a method in accordance with an embodiment of the present invention.</p><p>FIG. 4 shows a system in accordance with an embodiment of the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION</h4><p>Embodiments of methods and apparatus to defer correcting errors in tag entries of a tag array are described. In the following description, for purposes of explanation, numerous specific details are set forth to provide a thorough understanding of the present invention. It will be appreciated, however, by one skilled in the art that the present invention may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form Furthermore, one skilled in the art can readily appreciate that the specific sequences in which methods are presented and performed are illustrative and it is contemplated that the sequences can be varied and still remain within the spirit and scope of the present invention.</p><p>FIG. 2 shows an apparatus in accordance with an embodiment of the present invention. In an embodiment of the present invention, data access from a cache can be selectively controlled such that the data access is typically based on a hit indication generated without performing ECC detection and correction upon tag entries. Performing ECC detection and correction upon tag entries can increase the latency of data access. In the event of an error in a tag entry, the data access can be based upon an ECC corrected tag entry.</p><p>In one embodiment, cache <b>200</b> includes a tag array <b>201</b> and a data array <b>202</b>. A cache controller <b>281</b> is coupled to cache <b>200</b> and can send an address of requested data to the cache <b>200</b>. A first comparator <b>221</b> and a second comparator <b>222</b> can each receive at least an address tag field of the address of requested data. The first comparator <b>221</b> can generate a first hit indication based on a comparison of the address tag field and a first tag entry of the tag array <b>201</b>.</p><p>The first tag entry can be received by ECC detection logic <b>210</b> that can detect whether the first tag entry has a single-bit error, e.g., by comparing an ECC code portion of the first tag entry to a tag portion of the first tag entry. When a single-bit error is detected, the ECC detection logic <b>210</b> can generate a error detected signal. ECC correction logic <b>211</b> can receive the first tag entry, correct the single-bit error, and generate a corrected tag entry. The corrected tag entry can be received by the second comparator <b>222</b>. The second comparator <b>222</b> can generate a second hit indication based on a comparison of the address tag field and the corrected tag entry.</p><p>Each of the first hit indication and the second hit indication can be received by a multiplexer <b>225</b>. The multiplexer <b>225</b> can selectively output one of the first hit indication (generated without ECC detection and/or correction performed) and the second hit indication (generated with ECC detection and correction performed) based on the status of an ECC correct signal output by cache controller <b>281</b>. In one embodiment, access of data from the data array <b>202</b> is based on the output of the multiplexer <b>225</b>, e.g., either the first hit indication or the second hit indication.</p><p>The ECC correct signal can be generated by the cache controller <b>281</b> in response to the error detected signal generated by the ECC detection logic <b>210</b>. In one embodiment, the error detected signal is low (e.g., a logical zero, a voltage close to zero volts, etc.) in the absence of any single-bit error in a tag entry, and goes to high (e.g., to a logical one, to a voltage of 5 volts, to a voltage of 3.3 volts, to a voltage of 2.5 volts, etc.) to indicate that a single-bit error has been detected. When the cache controller <b>281</b> receives an error detected indication, it can generate an ECC correct signal to the cache <b>200</b> indicating that data access from the cache <b>200</b> should be based on an ECC corrected tag entry. In one embodiment, when the error detected signal goes high (e.g., to indicate detection of a single-bit error in a tag entry), the ECC correct signal goes high (e.g., to indicate data access from the cache should be based on an ECC corrected tag entry).</p><p>In one embodiment, when the ECC detected signal is low and indicating no detected single-bit error in a tag entry, then the ECC correct signal is low and multiplexer <b>225</b> selects the first hit indication output by first comparator <b>221</b> to control data access from the data array <b>202</b>. The first hit indication is generated without a delay caused by performing ECC detection and correction, and a first data entry of the data array <b>202</b> can be accessed based on the first hit indication. When the ECC detected signal goes high to indicate that a single-bit error in a tag entry has been detected, then the ECC correct signal goes high so that multiplexer <b>225</b> selects the second hit indication output by second comparator <b>222</b> to control data access from the data array <b>202</b>. A forced miss can be generated by the cache controller <b>281</b> in response to the error detected signal indicating a single-bit error so that the first data entry previously accessed will be disregarded. After the multiplexer <b>225</b> selects the second hit indication to control data access from the data array <b>202</b>, a second data entry of the data array <b>202</b> can be accessed based on the second hit indication.</p><p>Embodiments of the present invention are described with respect to detection and correction of single-bit errors in tag entries. Based upon system performance characteristics and the latency caused by correction of detected errors in tag entries, other embodiments of the present invention include methods and apparatus to defer correction of other errors (e.g., double-bit errors, etc.) in tag entries in addition to single-bit errors in tag entries.</p><p>FIG. 3 shows a method in accordance with an embodiment of the present invention. A cache receives an address of requested data and a micro-operation (<b>305</b>). Examples of a cache micro-operation include an RLU (read with LRU (least recently used) update), TI (tag inquire), TRR (tag read, data read), TWR (tag write, data read), TWW (tag write, data write), TW (tag write), and EVICT (eviction). The cache performs a tag lookup (<b>310</b>). It is determined whether the micro-operation is an RLU(<b>315</b>).</p><p>When the micro-operation is not an RLU, then it is determined whether there is a single-bit error in the tag (<b>320</b>). When there is a single-bit error, then the single-bit error is corrected (<b>325</b>) and the tag and a tag field of the address of requested data are compared (<b>330</b>). When there is no single-bit error, then the tag and a tag field of the address of requested data are compared (<b>330</b>) without correction of any single-bit error. Based upon the tag and tag field comparison, the hit/miss information is sent from the cache (e.g., a data entry corresponding to the hit, a miss indication, etc.) (<b>335</b>).</p><p>When the micro-operation is an RLU, then the tag and a tag field of the address of requested data are compared (<b>350</b>) and a first hit/miss information is sent from the cache (e.g., a first data entry corresponding to a hit, a miss indication, etc.). Whether or not there is a single-bit error in the tag is determined (<b>360</b>). When there is no single-bit error, then the first hit/miss information is accurate and has been accessed without a delay caused by error detection and/or correction. When there is a single-bit error, then an error detected signal is generated (<b>365</b>). The error detected signal can force a miss so that any first data entry accessed when the first hit/miss information was sent from the cached (<b>355</b>) can be disregarded. The single-bit error in the tag can be corrected (<b>370</b>), and the tag and the tag field of the address of requested data are compared (<b>375</b>). Based upon the tag and tag field comparison, a second hit/miss information can be sent from the cache (e.g., a second data entry corresponding to the second hit, a second miss indication, etc.) (<b>380</b>).</p><p>FIG. 4 shows a system in accordance with an embodiment of the present invention. Workstation <b>495</b> includes a system bus <b>475</b> coupled. to a memory <b>490</b>, processor <b>480</b>, and cache <b>200</b>. In one embodiment, cache <b>200</b> corresponds to the cache <b>200</b> illustrated and described in FIG. <b>2</b>. Cache <b>200</b> is coupled to a cache control circuit <b>481</b> of processor <b>480</b>. The cache control circuit <b>481</b> can send the address of requested data to cache <b>200</b>, receive an error detected signal when a single-bit error is detected in a tag entry, and generate an ECC correct signal that is received by the cache <b>200</b>. In one embodiment, the ECC correct signal is based at least in part on the error detected signal, e.g., when the error detected signal is low, the ECC correct signal is low, and data is accessed from the cache <b>200</b> based on a tag comparison performed without a prior detection and correction of single-bit errors in tag entries. When the error detected signal goes high (indicating a single-bit error in a tag entry), the ECC correct signal can go high in response, and data is accessed from the cache <b>200</b> based on a tag comparison performed with detection and correction of a single-bit error in the tag entry.</p><p>In another embodiment of the present invention, the ECC correct signal is based at least in part on the cache micro-operation sent to the cache <b>200</b> from cache control circuit <b>481</b>. In one embodiment, data is initially accessed from the data array <b>202</b> based on a tag comparison performed without prior detection and correction of an error in the tag entry for certain cache micro-operations that are performance critical (e.g., an RLU cache micro-operation, etc.). For other cache micro-operations (e.g., TI, TRR, TWR, TW, EVICT micro-operations, etc.) the cache control circuit can maintain the ECC correct signal at a logical value that causes data access from the cache to be based on a tag comparison performed with prior detection and correction of an error in a tag entry. Requiring data access to be based on a tag comparison performed with prior detection and correction of an error in a tag entry for certain cache micro-operations (e.g., a TI cache micro-operation) can reduce the complexity of handling errors in a tag entry during external snoops to the system.</p><p>In one embodiment, the processor <b>480</b> receives an error detected signal indicating an error in a tag entry and treats the cache micro-operation as resulting in a miss in the cache <b>200</b>. The processor can then forward the cache micro-operation to a next level cache <b>485</b> or a memory <b>490</b>. The processor <b>480</b> can also generate a flush cache directive, which can instruct the next level cache <b>485</b> to initiate a self-snoop into the system when the cache micro-operation appears on the system bus <b>475</b> so that any modified state data in the cache <b>200</b> (i.e., the data in the cache <b>200</b> is valid, but the memory copy of the data is out of date) is provided to the processor <b>480</b> to maintain cache coherency.</p><p>In accordance with one embodiment of the present invention, computer-readable instructions adapted to be executed by a processor to perform a method in accordance with an embodiment of the present invention are stored on a computer-readable medium and distributed as software. The computer-readable medium can a device adapted to store digital information. For example, a computer-readable medium includes a portable magnetic disk, such as a floppy disk; or a Zip\u00ae disk, manufactured by the Iomega Corporation of Roy, Utah (Zip\u00ae is a registered trademark of Iomega Corporation); or a Compact Disk Read Only Memory (CD-ROM) as is known in the art for distributing software.