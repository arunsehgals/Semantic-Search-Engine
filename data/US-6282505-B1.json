 two memory access operations during one cycle.</p><p>The conventional multi-port memory described above is attended with the following problems. When the memory cell area is kept retained, the memory capacity is lowered to half that of memory cells or the memory access time becomes longer. Alternatively, when the memory cell access time is used as the criterion, the total cycle time is to be doubled.</p><p>It is therefore an object of the present invention, which solves the problems above, to provide a multi-port memory in which the memory capacity is substantially equal to that of memory cells in the single-port memory and a plurality of memory access operations can be simultaneously executed substantially without elongating the memory access time, without causing a bank access collision, and without increasing the total cycle time.</p><h4>DISCLOSURE OF INVENTION</h4><p>In accordance with the present invention, there is provided a multi-port memory subdivided into a plurality of memory banks, each memory banks including means for storing therein data and an address of the data in a pair, determining means for determining whether or not an address corresponding to an address inputted from an external device exists in the memory bank, and means for accessing and outputting data paired with the address to an external device. The memory comprises first means for selecting each of a plurality of addresses inputted from the plural memory ports and inputting the selected address to either one of the plural memory banks and means for outputting data read from each of the memory banks to a data output port corresponding to the memory port from which the address inputted to the memory bank is supplied.</p><p>Moreover, In the multi-port memory above, the first means inputs, in a first cycle, a first address supplied from a first memory port of the plural memory ports to a first memory bank of the plural memory ports and a second address supplied from a second memory port of the plural memory ports to a second memory bank of the plural memory ports, the first means inputs, when the determining means of the first memory bank determines absence of data to be paired with the first address, the first address to the second memory bank in a cycle after the first cycle, and the first means inputs, when the determining means of the second memory bank determines absence of data to be paired with the second address, the second address to the first memory bank in a cycle after the first cycle.</p><p>Moreover, in the multi-port memory described above, the first means inputs, in a first cycle, a first address supplied from a first memory port of the plural memory ports to all memory banks of the plural memory ports.</p><p>Next, there is provided a data processor connected for use to the multi-port memory, the memory being used as a data memory. The processor comprises means for decoding information of a predetermined number of bits arranged in an instruction of accessing the data memory, the instruction being selected from instructions of a control program of the data processor, and means for executing the instruction in accordance with a result of the decoding. The information is information specifying one of the plural memory ports to be accessed.</p><p>The multi-port memory operates as follows.</p><p>An address from the first memory port is inputted to the first memory bank in the first cycle and then a check is conducted to determine whether or not data to be accessed has been stored in the first memory bank. If the data exists therein, the data is accessed to thereby finish processing on the first memory port side. If the data is missing, the address is inputted to the second memory bank in the second cycle and then a check is conducted to determine whether or not data to be accessed has been stored in the second memory bank. If the data exists therein, the data is accessed to thereby finish the processing of the first memory port.</p><p>On the other hand, an address is inputted via the second memory port in the first cycle to a memory bank other than the first memory bank such that a check is made to determine whether or not data to be accessed has been stored therein. If this is the case, the data is accessed to thereby finish the processing of the second memory port. If the data is missing, an address is inputted to a memory bank other than the second memory bank in the second cycle such that a check is made to determine whether or not data to be accessed has been stored therein. If the data exists therein, the data is accessed to thereby finish the processing of the second memory port.</p><p>Incidentally, in first cycle of the operation above, since the first memory port accesses the first memory bank while the second memory port accesses a memory bank other than the first memory bank, there is prevented the access collision and hence both operations can be simultaneously, i.e., concurrently processed.</p><p>Additionally, in second cycle, since the first memory port accesses the second memory bank while the second memory port is accessing a memory bank other than the second memory bank, there is prevented the access collision also in this case and hence both operations can be concurrently processed.</p><p>Furthermore, when there is issued only one memory access, the memory access can be completed in one cycle by accessing all memory banks in the first cycle. That is, an address of the first memory port is inputted to all memory banks in the first cycle and a check is made to determined one of the memory banks in which the data to be accessed has been stored. When the data exists in either one of the memory banks, the data is accessed to thereby terminate the processing of the first memory port.</p><p>Moreover, in a data processor connected to the multi-port memory above as its data memory, when bit information is appropriately specified in an instruction to access the data memory, it is possible during the first cycle to access the memory bank in which the access data is stored. This makes it possible to conduct a plurality of memory accesses during one cycle.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF DRAWINGS</h4><p>FIG. 1 is a block diagram showing a cache memory and a peripheral block thereof in an embodiment in accordance with the present invention;</p><p>FIG. 2 is a diagram showing operation in a first cycle to simultaneously process two memory accesses in the cache memory shown in FIG. 1;</p><p>FIG. 3 is a diagram showing operation in a second cycle to simultaneously process two memory accesses in the cache memory shown in FIG. 1;</p><p>FIG. 4 is a diagram showing operation to process one memory access in the cache memory shown in FIG. 1;</p><p>FIG. 5 is a block diagram entirely showing a data processor connected to the cache memory shown in FIG. 1; and</p><p>FIG. 6 is a block diagram showing a cache memory and a peripheral block thereof in another embodiment in accordance with the present invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>BEST MODE FOR CARRYING OUT THE INVENTION</h4><p>Referring now to the drawings, description will be given of embodiments in accordance with the present invention.</p><p>FIG. 5 shows in a block diagram a data processor in an embodiment of the present invention. The data processor of the embodiment includes a processor <b>410</b> to execute instructions, an instruction cache <b>420</b> as a cache memory for instructions, a data cache <b>430</b> as a cache memory for data, and a main memory <b>440</b>. These components are connected to each other via address and data buses. The instruction cache <b>420</b> is used to keep copies of program areas of the main memory <b>440</b> and the data cache <b>430</b> is employed to keep copies of data areas of the main memory <b>440</b>.</p><p>The processor <b>410</b> includes a register file <b>106</b> to store data, an arithmetic unit <b>412</b> to execute operations in accordance with instructions, and a control circuit <b>413</b> to control these elements. The processor <b>410</b> reads an instruction as a processing unit of a program from the instruction cache <b>420</b> and then the control circuit <b>413</b> drives in accordance with indication of the instruction the circuits such as the register file and the arithmetic unit in the processor <b>410</b>.</p><p>There are provided the following kinds of instructions such as an instruction in which data in the register file <b>106</b> is operated by the arithmetic unit <b>412</b> or the like and a result of the operation is stored in the register file <b>106</b>. In addition, there are supported an instruction to write the contents of the register file <b>106</b> in the data cache <b>430</b> and an instruction to write the contents of the main memory <b>440</b> or the data cache <b>430</b> in the register file <b>106</b>.</p><p>In this configuration, the data cache <b>430</b> is a cache memory having two memory ports. When data to be accessed exists in the data cache <b>430</b>, two data accesses can be simultaneously accomplished. Data read as an access result from the data cache <b>430</b> is sent to the processor <b>410</b> via a signal line (a bus line or the like) which establishes a connection between the data cache <b>430</b> and the processor <b>410</b>. FIG. 1 shows in detail a partial configuration of the data cache <b>430</b>.</p><p>FIG. 1 includes an internal block configuration of instruction registers <b>100</b> and <b>110</b>, a register file <b>106</b>, address calculators <b>107</b> and <b>117</b> of the processor <b>410</b> and the data cache <b>430</b> (enclosed with broken lines).</p><p>In each of the instruction registers <b>100</b> and <b>110</b>, there is set an instruction for a memory access. The instructions set to the registers <b>100</b> and <b>110</b> are respectively subdivided into five sections. The five sections respectively include operation code fields <b>101</b> and <b>111</b> to stipulate types of operation, port specifying hint fields <b>102</b> and <b>112</b> indicating information for specifications of access ports to the data cache, destination register specification fields <b>103</b> and <b>113</b>, base address register specification fields <b>104</b> and <b>114</b>, and displacement specification fields <b>105</b> and <b>115</b>. Thanks to the constitution, the processor <b>410</b> can simultaneously execute two instructions.</p><p>Assume that an instruction \u201cLoad (LD)\u201d to transfer data from a memory to a register has been set to the instruction register <b>100</b> in FIG. <b>1</b>. The Load instruction can be determined by interpreting the operation code field <b>101</b> by a decoder or the like, not shown. When the instruction is executed, data of a register Rb0 specified by the base address register specification field <b>104</b> is read from the register file <b>106</b>, the value of the data is added to displacement disp<b>0</b> in the displacement specification field <b>105</b>, the memory is accessed with the result of addition as an access key to read data therefrom, and then the obtained data is stored in a register Rd0 of the register file <b>106</b>, the register Rd0 being specified by the destination register specification field <b>103</b>.</p><p>Moreover, it is assumed that the \u201cLoad (LD)\u201d instruction to transfer data from the memory to a register has been similarly set to the instruction register <b>110</b> of FIG. <b>1</b>. This instruction can also be determined by interpreting the operation code field <b>111</b> by a decoder or the like, not shown. When the instruction is executed, data of a register Rb1 specified by the base address register specification field <b>114</b> is similarly read from the register file <b>106</b>, the value of the data is added to displacement disp<b>1</b> in the displacement specification field <b>115</b>, the memory is accessed with the result of addition as an access key to read data therefrom, and then the obtained data is stored in a register Rd1 of the register file <b>106</b>, the register Rd1 being specified by the destination register specification field <b>113</b>.</p><p>When the instruction in the instruction register <b>100</b> is executed, a memory port 0 of the data cache <b>430</b> is accessed, whereas when the instruction in the instruction register <b>110</b> is executed, a memory port 1 of the data cache <b>430</b> is accessed. Therefore, when the processor <b>410</b> executes two Load instructions at the same time, two accesses to the data cache are simultaneously issued via the signal lines between the processor <b>410</b> and the data cache <b>430</b>. It is assumed that the signal can simultaneously transfer two access requests of two instructions.</p><p>The data cache <b>430</b> includes two memory banks <b>125</b> and <b>135</b>, four selectors <b>108</b>, <b>118</b>, <b>146</b>, and <b>156</b>, and a control circuit <b>160</b> to control these components. The selector <b>108</b> conducts selection to determine whether an input address to the memory bank 0 (<b>125</b>) is to be inputted from a memory port 0 (which is a port for the memory bank 0 and comprehensively indicates an address input port and a memory data output port for the memory 0) or from a memory port 1 (which is a port for the memory bank 1 and comprehensively indicates an address input port and a memory data output port for the memory 1). The selector <b>118</b> conducts selection to determine whether an input address to the memory bank 1 (<b>135</b>) is to be inputted from the memory port 0 or from the memory port 1. The selector <b>146</b> conducts selection to determine whether read data to be outputted to the memory port 0 is to be supplied from the memory bank 0 (<b>125</b>) or from the memory port 1 (<b>135</b>). The selector <b>156</b> conducts selection to determine whether read data to be outputted to the memory port 1 is to be fed from the memory bank 0 (<b>125</b>) or from the memory port 1 (<b>135</b>).</p><p>The memory bank 0 (<b>125</b>) is a cache memory of a two-way set-associative operation. Read operations of memory arrays <b>121</b> to <b>124</b> are carried out by decoding low-order bits of the address selected by the selector <b>108</b>. In the memory arrays <b>121</b> and <b>122</b>, there are stored tags of ways 0 and 1, respectively. Data of way 0 and that of way 1 are respectively stored in the memory arrays <b>123</b> and <b>124</b>. The tags of way 0 and way 1 respectively read from the memory arrays <b>121</b> and <b>122</b> are respectively compared by comparators <b>141</b> and <b>142</b> with high-order bits of the address selected by the selector <b>108</b>. In a state in which it is determined as a result of comparisons that there exists a matching address, namely, in a hit, data corresponding to the matching way is selected by a selector <b>143</b> from the data of way 0 and data of way 1 respectively read from the memory arrays <b>123</b> and <b>124</b>, and the selected data is delivered as output data from the memory bank 0 (<b>125</b>). A state in which the matching address is not found is called a miss.</p><p>The memory bank 1 (<b>135</b>) is, like the memory bank <b>125</b> above, a cache memory of a two-way set-associative operation. Read operations of memory arrays <b>131</b> to <b>124</b> are carried out by decoding low-order bits of the address selected by the selector <b>118</b>. In the memory arrays <b>131</b> and <b>132</b>, there are stored tags of ways 0 and 1, respectively. Data of way 0 and that of way 1 are respectively stored in the memory arrays <b>133</b> and <b>134</b>. The tags of way 0 and way 1 respectively read from the memory arrays <b>131</b> and <b>132</b> are respectively compared by comparators <b>151</b> and <b>152</b> with high-order bits of the address selected by the selector <b>118</b>. In a state in which it is determined as a result of comparisons that there exists a matching address, namely, in a hit, data corresponding to the matching way is selected by a selector <b>153</b> from the data of way 0 and data of way 1 respectively read from the memory arrays <b>133</b> and <b>134</b> and the selected data is delivered as output data from the memory bank 1 (<b>135</b>). A state in which the matching address is not found is called a miss.</p><p>The selectors <b>146</b> and <b>156</b> conduct operations such that the data outputted from each of the respective memory banks is outputted to the memory port 0 