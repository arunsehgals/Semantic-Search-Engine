86 generations--the 8086/8, 80286, 80386, and 80486. Maintaining software compatibility has forced many architectural compromises in newer products. In order to retain the functions of earlier products, hardware has often been simply modified or extended in order to increase capability and performance. One area that is often extended to increase capability and performance is the memory addressing model.</p><p>Early x86 microprocessors implemented a memory addressing model using segmentation. In segmentation, a memory address is specified by an instruction using two parts: a segment and an offset within the segment. The segment selector is stored in a segment register and indicates where the segment is located in main memory (if the processor is running in unprotected mode) or points to a segment descriptor stored in a segment descriptor table in main memory. The segment descriptor contains information about the segment, including its base address. The base address is added to the offset to form the physical address. Each x86 instruction that has the ability to access memory has a default segment register from which it draws its segment data. The x86 architecture defines six segment registers: CS, DS, SS, ES, FS, and GS. CS is the default segment register used for code (instruction) storage. DS is the default segment register used for instructions that do not manipulate stack values. For stack accesses, SS is the default segment register. ES is the default segment register used for string manipulation instructions. The default segment may be overridden in favor of another segment register for a particular instruction by adding a segment override prefix byte to the instruction. The segment override prefix byte is a field of the instruction. As used herein, the term \"instruction field\" refers to one or more bytes within the bytes which form an instruction.</p><p>Beginning with the 80386, special paging circuitry was added to the segmented address generation hardware to allow the implementation of paged memory systems. Programmers are developing operating systems which use paged memory systems. Paged memory systems offer the ability to load smaller portions of programs into main memory at any given time and provide additional built-in protection checking for programs running simultaneously. Additional information regarding the paging structure and segmentation in the x86 architecture may be found within the publication \"Programming the 80386\" by Crawford, et al., SYBEX, Inc., San Francisco, 1987. This publication is incorporated herein by reference in its entirety.</p><p>Memory segmentation is typically not used when implementing such paged memory systems. Memory segmentation cannot be \"turned off,\" but may be effectively disabled through the use of a \"flat\" memory model. A flat memory model is created by making all segment registers point to the same memory segment (i.e., making all memory segments overlap). This overlapping is accomplished by storing the same segment information in all segment registers. Programmers using the paging mechanism typically implement the flat memory model.</p><p>Aspects regarding other portions of a microprocessor may be found in the co-pending, commonly assigned patent application entitled \"High Performance Superscalar Microprocessor\", Ser. No. 08/146,382, filed Oct. 29, 1993 by Witt, et al, now abandoned in favor of Ser. No. 08/501,243, now U.S. Pat. No. 5,651,125. Additionally, information may be found in the co-pending, commonly assigned patent application entitled \"High Performance Superscalar Instruction Alignment Unit\", Ser. No. 08/377865, filed Jan. 25, 1995 by Tran, et al, now abandoned in favor of Ser. No. 08/943,469. The disclosures of both of the aforementioned applications are hereby incorporated by reference in their entirety.</p><p>The flat memory model has a major impact on the utility of the segment registers. Holding redundant segment address information makes the two general purpose segment registers added with the 80286 microprocessor, FS and GS, virtually useless. (The other segment registers are implicitly referenced by 80x86 instructions, but are only marginally useful since they contain redundant information). In addition, operating systems may detect attempts to use these registers for other useful purposes and may generate an exception. Since these registers are used for address generation, loading a segment register with an improper value might enable a program to corrupt the memory space being used by another program, or the operating system itself. A constructive use for explicit references to segment registers under the flat memory model is desired.</p><h4>SUMMARY OF THE INVENTION</h4><p>A microprocessor according to the present invention may be configured to detect the presence of segment override prefixes in instruction code sequences being executed in flat memory mode, and to use the prefix value or the value stored in the associated segment register to control the selection of a bank of registers to use for the instruction operands. Each bank of registers includes the full complement of x86 registers. Advantageously, more registers are available to a program than the x86 architecture specifies, but the instruction encoding is unchanged. Having more registers available to a program allows for more operands to be stored in the registers. Since registers are accessible in a shorter period of time than memory, performance may be increased due to the decrease in operand access time.</p><p>Broadly speaking, the present invention contemplates a microprocessor comprising an address translation unit, a plurality of segment registers, a first and second control unit, and a configuration register. The address translation unit is configured to generate a physical address from a logical address and a segment value. Closely coupled to the address translation unit, at least one of the plurality of segment registers stores the aforementioned segment value. The first control unit is configured to detect an instruction field indicative of one of the plurality of segment registers and to convey a signal to the address translation unit indicative of one of the plurality of segment registers. The configuration register stores a value indicative of an address translation mode of the microprocessor. Finally, the second control unit is configured to modify the decoding of an instruction according to the signal from the first control unit. The present invention further contemplates a computer system comprising the above mentioned microprocessor and a main memory.</p><p>The present invention still further contemplates a microprocessor comprising an address translation unit, a plurality of segment registers, a first and second control unit, and a configuration register. The address translation unit is configured to generate a physical address from