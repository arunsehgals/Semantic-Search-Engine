t happen when rounding per every multiply-add operation is repeated. Furthermore since the data processor requires one circuit for normalization and the like, increasing of the circuit scale can be restricted as much as possible while inner product operation and vector transforming operation of floating point can be performed at high speed and with high accuracy.</p><p>In order to efficiently perform process for negative number in parallel multiplication and addition of floating point number, it is preferred that the arithmetic portion further includes a sign processing portion generating a sign with respect to a result of multiplication of each multiplier in response to the sign of floating point number multiplied by each multiplier, the aligner includes a selector selectively outputting the result of alignment shift in inverting or non-inverting manner for selecting an inverted output when the sign of the result of multiplication is negative, and the multi-input adder generates a carry for adding +1 to the output of aligner corresponded to negative sign with respect to the result of multiplication to perform complement process of two for the negative result of multiplication.</p><p>The objective data for arithmetic operation by the arithmetic portion and resultant data of arithmetic operation are temporarily stored in a register file. At this time, in order to enable such process without increasing number of ports of the register and number of bits of a register designation field, the register file is provided a register bank structure so that a plurality of register banks or the registers of single bank are connected to respective input terminals of the multipliers.</p><p>Paying attention for inner product operation, it is preferred to include an inner product operation command for directly deriving the inner product of less than or equal to length 4 in the instruction set of the data processor. The floating point unit further includes a control portion which can decode floating point command defining inner product operation of data expressed by a plurality of components, the control portion decodes the floating point command to provide component of data held in the register file to the arithmetic portion via the signal line group to make the arithmetic portion to calculate the inner product of the provided data to write in the result of inner product operation in the register file.</p><p>Paying attention for matrix transforming operation, it is preferred to incorporate a vector transforming operation command in the instruction set of the data processor. The floating point unit has a control portion which can decode a floating point command defining a matrix operation of data expressed by each of a plurality of components and a transformation matrix, the control portion decodes the floating point command, reads the data component held by the register file and component of the transformation matrix to provide to the arithmetic portion via the signal line group, makes the arithmetic portion to calculate inner product of the provided data, repeatedly executes a series of operation cycle for writing the result of inner product operation in the register file for a plurality of times. At this time, for correct operation even when a source register and a destination register are overlapped, and controls latency of respective arithmetic cycles so that the reading operation of the register file in the final arithmetic cycle to be sequentially executed for a plurality of times becomes earlier than writing timing of the register file of the result of inner product operation in the first arithmetic cycle. Also, at this time, by performing reading out from the register file in both banks, in parallel, and performing register selection control for performing writing in the register file to one of the banks, shorting of number of floating point register can be compensated. Namely, the register file is used by assigning a plurality of operands (transformation matrix, vector data) to a plurality of banks, separately.</p><p>Such a manner of use of the register file is effective for an architecture, in which the register designation filed is limited such as sixteen bit fixed length floating point command, and number of registers is limited, and enables inner product operation and vector transforming operation of floating point in the data processor of the architecture having such limited resource.</p><p>On the other hand, by adding a coefficient table and a feedback circuit of the multiplier in the arithmetic portion, an approximated value of trigonometric function can be obtained by zone division and high order polynomial expansion. By this, sine and cosine to be used in the transformation matrix or so forth can be obtained without significantly increasing the chip area.</p><p>The data processor includes a CPU connected to the address bus and a data bus, and the floating point unit performs floating point processing using sixteen-bit fixed length floating point command. The CPU performs addressing process for obtaining data necessary for execution of floating point processing in the floating point unit. By this, the floating point unit does not require a support high performance addressing mode as that of CPU. Even in this point, sixteen bit fixed length of the floating point command is enabled.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 is a block diagram of one embodiment of a data processor according to the present invention;</p><p>FIG. 2 is an explanatory illustration of a primary register construction of the data processor of FIG. 1;</p><p>FIG. 3 is a block diagram of one embodiment of FPU;</p><p>FIG. 4 is a block diagram of one embodiment of an arithmetic block;</p><p>FIG. 5 is a block diagram of one embodiment of a maximum digit number selecting portion;</p><p>FIG. 6 is a block diagram of one embodiment of a matching selecting portion;</p><p>FIG. 7 is a block diagram of one embodiment of an aligner;</p><p>FIG. 8 is a block diagram of one embodiment of a four-input adder;</p><p>FIG. 9 is an explanatory illustration showing a possibly obtainable values of Cin[<b>0</b>], Cin[<b>1</b>] and Cin[<b>2</b>] with respect to Inv[n] in the four-input adder;</p><p>FIG. 10 is a block diagram showing a detailed construction of a carry save adder array and a carry propagate adder array;</p><p>FIG. 11 is an explanatory illustration of one embodiment of a 4-2 compressor;</p><p>FIG. 12 is a block diagram of one embodiment of a register file;</p><p>FIG. 13 is an explanatory illustration of a construction of respective register groups forming the register file;</p><p>FIG. 14 is an illustration showing a construction of one embodiment of each register circuit in the register group;</p><p>FIG. 15 is an explanatory illustration showing mode of operation of a read port A of the register file;</p><p>FIG. 16 is an explanatory illustration showing mode of operation of a read port B of the register file;</p><p>FIG. 17 is an explanatory illustration showing mode of operation of a read port C of the register file;</p><p>FIG. 18 is an explanatory illustration showing application of an inner product;</p><p>FIG. 19 is a block diagram briefly showing a process according to an inner product operation command;</p><p>FIG. 20 is an explanatory illustration showing one example of a specification for use of a register file in the inner product operation command;</p><p>FIG. 21 is an explanatory illustration generally showing a vector transformation;</p><p>FIG. 22 is a block diagram briefly showing a process according to a vector transformation command;</p><p>FIG. 23 is an explanatory illustration showing one example of specification for use of the register file in a vector transformation operation command;</p><p>FIG. 24 is an explanatory illustration showing a pipeline of a plurality of times of inner product calculation process by one vector transformation command;</p><p>FIG. 25 is an explanatory illustration of specification of a sine-cosine command;</p><p>FIG. 26 is an explanatory illustration of a format of an angle data to be used in the sine-cosine command;</p><p>FIG. 27 is an explanatory illustration showing a relationship between a center value for polynomial approximate and an angle (radian);</p><p>FIG. 28 is a flowchart of an operation process according to the sine-cosine command according to polynomial approximation;</p><p>FIG. 29 is a block diagram in the vicinity of a multiplier added a coefficient table for executing sine-cosine command and a feedback system of the multiplier;</p><p>FIG. 30 is an explanatory illustration showing flow of data in the first step shown by (1) of FIG. 28, by a thick line;</p><p>FIG. 31 is an explanatory illustration showing flow of data in the second step shown by (2) of FIG. 28, by a thick line;</p><p>FIG. 32 is an explanatory illustration showing flow of data in the second step shown by (3) of FIG. 28, by a thick line;</p><p>FIG. 33 is an explanatory illustration showing flow of data in the second step shown by (4) of FIG. 28, by a thick line;</p><p>FIG. 34 is a block diagram briefly showing an operation block <b>22</b> for facilitating understanding of flow of data in operation process upon execution of the inner product operation command or the vector transformation command;</p><p>FIG. 35 is a comparative explanatory illustration showing an example, in which two sets of the multiply-add unit and a circuit for normalizing, obtaining positive number and rounding, are arranged in parallel;</p><p>FIG. 36 is a comparative explanatory illustration showing an example, in which four sets of the multiply-add unit and a circuit for normalizing, obtaining positive number and rounding, are arranged in parallel;</p><p>FIG. 37 is a comparative explanatory illustration showing an example, in which four multiply-add units are arranged in parallel for integer operation;</p><p>FIG. 38 is a block diagram showing one example of a data processing system, to which the data processor is applied; and</p><p>FIG. 39 is a block diagram showing one example of a three-dimensional graphics processing system, to which the data processor is applied.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DESCRIPTION OF THE PREFERRED EMBODIMENT</h4><p>Construction of Data Processor</p><p>FIG. 1 is a block diagram of one embodiment of a data processor according to the present invention. The data processor <b>1</b> shown in FIG. 1 has a 32 bit RISC (Reduced Instruction Set Computer) architecture and executes fixed length 16 bit floating point command. The shown embodiment is particularly effective in application for an equipment built-in control (e.g. video game) requiring sufficient support for three-dimensional graphics.</p><p>The data processor <b>1</b> has a floating point unit <b>2</b>. A floating point number for which the floating point unit performs operation, is a single precision. Also, the data processor <b>1</b> has a central processing unit (CPU) <b>3</b>. This CPU <b>3</b> is an integer unit having performance for processing an integer. CPU <b>3</b> is connected to the floating point unit <b>2</b> via a 32 bit data bus <b>4</b>. CPU <b>3</b> and the floating point unit <b>2</b> takes instruction from an instruction cache unit <b>6</b> via an instruction bus <b>5</b>. An instruction address is provided to the instruction cache unit <b>6</b> from CPU <b>3</b>. A data cache unit <b>7</b> is connected to the data bus <b>4</b> and is supplied a data address from CPU <b>3</b> via a data address bus <b>8</b>. The data cache unit <b>7</b> and the instruction cache unit <b>6</b> have cache controller and cache memory respectively neglected from illustration. The instruction cache control <b>6</b> and the data cache unit <b>7</b> are connected to a bus controller via a cache bus <b>13</b> including a data signal and a control signal. An instruction address for external access caused by cache-miss or so forth in the instruction cache unit <b>6</b>, is applied to a bus controller <b>9</b>. A data address for external access caused by cache-miss or so forth in the data cache unit <b>7</b>, is applied to the bus controller <b>9</b>. According to the instruction address or the data address, the bus controller <b>9</b> initiates an external bus cycle for accessing an external memory connected to an address pin, a data pin or so forth typically illustrated. On the other hand, to the bus controller <b>9</b>, a peripheral circuit <b>10</b>, such as a timer, serial communication interface controller and so forth, is connected via a peripheral bus <b>11</b>. The data processor shown in FIG. 1 is formed on one semiconductor substrate, such as monocrystalline silicon. The floating point unit (hereinafter simply referred to as FPU) requires data or instruction from a memory for floating point process. In the shown embodiment, the FPU <b>2</b> does not have a capability for storing data in a cache memory in the data cache unit <b>7</b> or obtaining data from the cache memory. This is for saving a chip area by avoiding necessity of memory addressing circuit of the FPU <b>2</b>. Accordingly, the FPU <b>2</b> or the floating point instruction is not necessary to support a powerful addressing mode similarly to CPU <b>3</b>, and all of such functions are loaded to CPU <b>3</b>. CPU <b>3</b> performs not only fetching of data from the memory for the FPU <b>2</b> but also fetching of all instructions including floating point instruction for the FPU <b>2</b> from the memory. Instruction is taken both in CPU <b>3</b> and the FPU <b>2</b> and decoded therein. CPU <b>3</b> executes the integer process designated by the instruction when the decoded instruction is instruction for CPU. On the other hand, when the decoded instruction is for FPU. CPU <b>3</b> performs addressing process to be executed in place of the FPU <b>2</b>. When the decoded instruction is an instruction for FPU, the FPU <b>2</b> executes the floating point process designated by the instruction. Also, when the decoded instruction is an instruction for CPU, the FPU <b>2</b> ignores the instruction.</p><p>FIG. 2 shows a major register construction of the data processor. A CPU register has sixteen general purpose registers r<b>0</b> to r<b>15</b> and Kernel bank registers k<b>0</b> to k<b>7</b> corresponding to the former. For example, Kernel bank register k<b>0</b> to k<b>7</b> are used by bank switching control in place of saving in the general purpose registers r<b>0</b> to r<b>7</b> upon occurrence of exception.</p><p>The FPU register has a bank register structure having a front-bank and a back-bank. The front-bank includes sixteen registers f<b>0</b> to f<b>15</b>. The back-bank includes corresponding sixteen registers b<b>0</b> to b<b>15</b>. Which bank of the registers are to be used is determined depending upon a value of a control bit of a control register, for example. In case of the FPU register, the registers in both banks are used as source registers and destination registers when a particular floating point instruction is to be executed. The registers f<b>0</b> to f<b>15</b> are taken as sixteen registers for the floating point number of a single precision format, as eight registers (d<b>0</b>, d<b>2</b>, d<b>4</b>, d<b>8</b>, d<b>10</b>, d<b>12</b>, and d<b>14</b> for the floating point number of double precision format, and as four vector registers (V<b>0</b>, V<b>4</b>, V<b>8</b> and V<b>12</b>) for a vector data having four components, each of which is provided in single precision format.</p><p>A communication register FPU common to the FPU <b>2</b> and CPU <b>3</b> is provided, The register FPU is provided for speeding up transfer of data between CPU <b>3</b> and the FPU <b>2</b>. It should be noted that each register has 32 bit construction.</p><p>Construction of FPU</p><p>In FIG. 3, a block diagram of the FPU <b>2</b> is illustrated. The FPU <b>2</b> is constructed with a transfer block <b>20</b>, a register file <b>21</b>, an arithmetic block <b>22</b> and a control portion <b>23</b>. The arithmetic block <b>22</b> has a construction of a multiply-add unit realizing speeding up of matrix operation or vector operation, discussed in detail. The register file <b>21</b> includes the FPU register discussed in connection with FIG. 2, and has eight read ports A[<b>0</b>], B[<b>0</b>], A[<b>1</b>], B[<b>1</b>], A[<b>2</b>], B[<b>2</b>], A[<b>3</b>] and B[<b>3</b>] for the arithmetic block <b>22</b> and a write port X receiving data from the arithmetic block <b>22</b>. The transfer block <b>20</b> includes a bus driver <b>200</b> supplying data output from each port C of the register file and a selector <b>201</b> selecting an input from the data bus <b>4</b> and an output from the register file <b>21</b> for supplying to a write port Y of the register file <b>21</b>. The control portion <b>23</b> decodes the instruction supplied from the instruction bus <b>5</b>, and controls the transfer block <b>20</b>, the register file <b>21</b> and the arithmetic block <b>22</b> according to result of decoding. Control signals BusDrv and LoadCntl of the bus driver <b>200</b> and the selector <b>201</b> are also generated by the control portion <b>23</b>.</p><p>In FIG. 4, one embodiment of the arithmetic block <b>22</b> is illustrated. The arithmetic block <b>