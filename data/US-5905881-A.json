ing system before the pipelined instruction processor determines if the condition of the first instruction is satisfied, comprising:<claim-text>a. first executing means coupled to the first stage of the pipelined instruction processor for executing the first instruction in the first stage of the pipelined instruction processor during the first pipeline cycle;</claim-text><claim-text>b. transferring means coupled to the first stage and the second stage of the pipelined instruction processor for transferring the first instruction from the first stage of the pipelined instruction processor to the second stage of the pipelined instruction processor during the second pipeline cycle;</claim-text><claim-text>c. second executing means coupled to the second stage of the pipelined instruction processor for executing the first instruction in the second stage of the pipelined instruction processor, said first executing means executing the second instruction in the first stage of the pipelined instruction processor during the second pipeline cycle;</claim-text><claim-text>d. determining means coupled to the pipelined instruction processor for determining whether the condition of the first instruction is satisfied, thereby determining if the first instruction will in fact prevent the normal sequential execution of the second instruction; and</claim-text><claim-text>e. delay means coupled to the pipelined instruction processor and further coupled to said determining means for delaying the result of the second instruction from altering the state of the data processing system until said determining means determines whether the first instruction will in fact prevent the normal sequential execution of the second instruction, said delay means comprising at least one staging means connected in parallel with the second stage for receiving the result of the second instruction, said delay means delaying the result of the second instruction from altering the state of the data processing system without interrupting the normal sequential execution of the first instruction and the second instruction through the number of pipeline stages.</claim-text></claim-text></claim>"}, {"num": 21, "parent": 20, "type": "dependent", "paragraph_markup": "<claim num=\"21\"><claim-text>21. A data processing system according to claim 20 further comprising:<claim-text>f. aborting means coupled to said determining means and said delay means for aborting the execution of the second instruction and preventing the result of the second instruction from altering the state of the pipelined instruction processor if said determining means determines that the first instruction will in fact prevent the normal sequential execution of the second instruction.</claim-text></claim-text></claim>"}, {"num": 22, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"22\"><claim-text>22. A pipelined instruction processor comprising:<claim-text>a. a first pipeline stage for executing a first instruction during a first pipeline cycle and a second instruction during a second pipeline cycle and a third instruction during a third pipeline cycle, said first pipeline stage using an indexing address to generate an operand address, and providing a new incremented indexing address;</claim-text><claim-text>b. a second pipeline stage coupled to said first pipeline stage for executing the first instruction during the second pipeline cycle and the second instruction during the third pipeline cycle and the third instruction during a fourth pipeline cycle, said second pipeline stage fetching an operand from a memory at the operand address provided by said first pipeline stage;</claim-text><claim-text>c. a third pipeline stage coupled to said second pipeline stage for executing the first instruction during the third pipeline cycle and the second instruction during the fourth pipeline cycle and the third instruction during a fifth pipeline cycle, said third pipeline stage performing a predetermined arithmetic operation on the operand provided by the second pipeline stage;</claim-text><claim-text>d. a delay circuit coupled to said first pipeline stage for storing the new incremented indexing address for a predetermined number of pipeline cycles, said delay circuit storing the new incremented indexing address without interrupting the normal sequential execution of the first instruction and the second instruction through the number of pipeline stages, said delay circuit comprising at least one staging means connected in parallel with at least the second pipeline stage for receiving the incremented indexing address from the first pipeline stage; and</claim-text><claim-text>e. a wrap logic control block coupled to said first pipeline stage, said third pipeline stage and said delay circuit for providing the incremented indexing address to predetermined instructions in the first pipeline stage.</claim-text></claim-text></claim>"}, {"num": 23, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"23\"><claim-text>23. An instruction processor according to claim 22 wherein said first instruction aborts the execution of the second instruction if a preselected condition is satisfied.</claim-text></claim>"}, {"num": 24, "parent": 23, "type": "dependent", "paragraph_markup": "<claim num=\"24\"><claim-text>24. An instruction processor according to claim 23 wherein said predetermined arithmetic operation of the third pipeline stage determines if the preselected condition is satisfied.</claim-text></claim>"}, {"num": 25, "parent": 23, "type": "dependent", "paragraph_markup": "<claim num=\"25\"><claim-text>25. An instruction processor according to claim 23 wherein said wrap logic control block writes the new incremented indexing address to a memory if said preselected condition is not satisfied.</claim-text></claim>"}, {"num": 26, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"26\"><claim-text>26. A method of executing a number of instructions including a first instruction within a pipelined instruction processor of a data processing system wherein the pipelined instruction processor has a number of pipeline stages, the architectural state of the pipelined instruction processor being defined by at least one value stored in a memory, the first instruction being sequentially executed by respective ones of the number of pipeline stages wherein a selected one of the number of pipeline stages provides an architectural state change value to the memory during the sequential execution of the first instruction, comprising the steps of:<claim-text>a. writing the architectural state change value to the memory; and</claim-text><claim-text>b. delaying said writing step (a) from writing the architectural state change value to the memory for a predetermined time period, said delaying step delaying said writing step by staging the architectural state change value in parallel with the number of pipeline stages, said delaying step delaying said writing step without interrupting the normal sequential execution of the first instruction through the number of pipeline stages.</claim-text></claim-text></claim>"}, {"num": 27, "parent": 26, "type": "dependent", "paragraph_markup": "<claim num=\"27\"><claim-text>27. A method according to claim 26 wherein the sequential execution of the first instruction provides a fault condition after a predetermined one of the number of pipeline stages executes the first instruction.</claim-text></claim>"}, {"num": 28, "parent": 27, "type": "dependent", "paragraph_markup": "<claim num=\"28\"><claim-text>28. A method according to claim 27 wherein said delay step delaying said writing step from writing the architectural state change value to the memory until after the first instruction is executed by the predetermined one of the number of pipeline stages.</claim-text></claim>"}, {"num": 29, "parent": 28, "type": "dependent", "paragraph_markup": "<claim num=\"29\"><claim-text>29. A method according to claim 28 further comprising an interrupt step wherein an interrupt controller selectively provides an instruction interrupt signal to the instruction processor during the sequential execution of the first instruction.</claim-text></claim>"}, {"num": 30, "parent": 29, "type": "dependent", "paragraph_markup": "<claim num=\"30\"><claim-text>30. A method according to claim 29 further comprising an aborting step for aborting execution of the first instruction and preventing said writing step from writing the architectural state change value to the memory if said interrupt controller provides the instruction interrupt signal.</claim-text></claim>"}, {"num": 31, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"31\"><claim-text>31. A method of executing a number of instructions including a first instruction and a second instruction within a pipelined instruction processor of a data processing system wherein the pipelined instruction processor has a number of pipeline stages, both the first instruction and the second instruction being sequentially executed by respective ones of the number of pipeline stages with the first instruction entering the pipelined instruction processor first, the first instruction preventing the normal sequential execution of the second instruction upon the satisfaction of a condition, the second instruction providing a result that upon normal completion alters the state of the data processing system before the pipelined instruction processor determines if the condition of the first instruction is satisfied, comprising the steps of:<claim-text>a. determining whether the condition of the first instruction is satisfied, thereby determining if the first instruction will in fact prevent the normal sequential execution of the second instruction; and</claim-text><claim-text>b. delaying the result of the second instruction from altering the state of the data processing system unt