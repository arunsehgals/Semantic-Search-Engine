set associative instruction cache that utilizes a specially designed Least Recently Used (LRU) unit to effectively lock a first portion of the instruction cache to allow high speed and predictable execution time for time critical program code sections residing in the first portion while leaving another portion of the instruction cache free to operate as an instruction cache for other, non-critical, code sections. The present invention provides the above features in a system that is virtually transparent to the program code and does not require a variety of complex or specialized instructions or address coding methods. The present invention is flexible in that the two set associative instruction cache is transformed into what may be thought of as a static RAM in cache, and in addition, a direct map cache unit. Several different time critical code sections may be loaded and locked into the cache at different times.</p></abstract>"}, {"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"docdb\" mxw-id=\"PA10451967\" source=\"national office\"><p>An instruction locking apparatus and method for a cache memory allowing execution time predictability and high speed performance. The present invention implements a cache locking scheme in a two set associative instruction cache that utilizes a specially designed Least Recently Used (LRU) unit to effectively lock a first portion of the instruction cache to allow high speed and predictable execution time for time critical program code sections residing in the first portion while leaving another portion of the instruction cache free to operate as an instruction cache for other, non-critical, code sections. The present invention provides the above features in a system that is virtually transparent to the program code and does not require a variety of complex or specialized instructions or address coding methods. The present invention is flexible in that the two set associative instruction cache is transformed into what may be thought of as a static RAM in cache, and in addition, a direct map cache unit. Several different time critical code sections may be loaded and locked into the cache at different times.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. An instruction cache apparatus for use with a microprocessor that executes a plurality of microprocessor instructions, said instruction cache apparatus comprising:<claim-text>cache memory means for storing microprocessor instructions;</claim-text><claim-text>means for determining which of said microprocessor instructions are those least recently accessed within said cache memory means, said means for determining coupled to said cache memory means; and</claim-text><claim-text>means for selectively prohibiting said means for determining from indicating that selected microprocessor instructions stored within said memory cache means are least recently used by said microprocessor during assertion of a blocking signal to ensure that said selected microprocessor instructions are subsequently accessible in said cache memory means, said means for prohibiting coupled to said means for determining;</claim-text><claim-text>means for indicating which of said microprocessor instructions are those least recently used by said microprocessor, said means for indicating coupled to said means for determining.</claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. An instruction cache apparatus as described in claim 1 wherein said cache memory means is a two way set associative cache memory comprising a plurality of sets and two ways associated with each set of said plurality of sets.</claim-text></claim>"}, {"num": 3, "parent": 2, "type": "dependent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. An instruction cache apparatus as described in claim 2 wherein:<claim-text>said means for indicating which of said microprocessor instruction are those least recently used within said cache memory means comprises a bit for indicating which way of said two ways is least recently used by said microprocessor for each set of said plurality of sets of said cache memory means;</claim-text><claim-text>said means for determining comprises inverter means for inverting said bit of said means for indicting associated with a particular set when a microprocessor instruction is stored into said particular set of said cache memory means; and wherein</claim-text><claim-text>said means for selectively prohibiting comprises a disable means for disabling said inverter means so that said means for indicating does not alter indication state upon storage of a microprocessor instruction into said cache memory means.</claim-text></claim-text></claim>"}, {"num": 4, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. An instruction cache apparatus as described in claim 1 wherein:<claim-text>said cache memory means is a two way set associative cache memory comprising a plurality of sets and two ways associated with each set of said plurality of sets; and wherein</claim-text><claim-text>said means for indicating further comprises a bit for indicating which way of said two ways is least recently used by said microprocessor for each set of said plurality of sets of said cache memory means.</claim-text></claim-text></claim>"}, {"num": 5, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. An instruction cache apparatus as described in claim 1 wherein said means for determining comprises:<claim-text>updating means for updating said means for indicating upon storage of a microprocessor instruction into said cache memory means.</claim-text></claim-text></claim>"}, {"num": 6, "parent": 5, "type": "dependent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. An instruction cache apparatus as described in claim 5 wherein said means for prohibiting comprises a disable means for disabling said updating means so that said means for indicating does not alter indication state upon storage of a microprocessor instruction into said cache memory means.</claim-text></claim>"}, {"num": 7, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"7\"><claim-text>7. An instruction cache apparatus as described in claim 1 wherein:<claim-text>said cache memory means is a two way set associative cache memory comprising a plurality of sets and two ways associated with each set of said plurality of sets; wherein</claim-text><claim-text>said means for indicating which of said microprocessor instructions are those least recently stored within said cache memory means comprises a bit for indicating which way of said two ways is least recently used by said microprocessor for each set of said plurality of sets of said cache memory means; and wherein</claim-text><claim-text>said means for determining comprises inverter means for inverting said bit of said means for indicating associated with a particular set when a microprocessor instruction is stored into said particular set of said cache memory means.</claim-text></claim-text></claim>"}, {"num": 8, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"8\"><claim-text>8. An instruction cache apparatus for supplying instructions to a microprocessor, said instruction cache apparatus comprising:<claim-text>cache memory means for providing storage of said instructions, said cache memory means comprising a plurality of sets of storage locations, each set of said plurality of sets comprising a plurality of entries;</claim-text><claim-text>pointing means for indicating a particular entry of said plurality of entries for each of said sets, said particular entry being a least recently used entry of said plurality of entries for each of said sets;</claim-text><claim-text>processing means for updating said pointing means, said processing means coupled to said pointing means; and</claim-text><claim-text>blocking means for preventing said processing means from updating said pointing means such that said pointing means never indicates that instructions within a first portion of said cache memory means are least recently used, said instructions being a particular plurality of user selected instructions.</claim-text></claim-text></claim>"}, {"num": 9, "parent": 8, "type": "dependent", "paragraph_markup": "<claim num=\"9\"><claim-text>9. An instruction cache apparatus as described in claim 8 further comprising:<claim-text>storage means for storing an instruction into said cache memory means at a particular set of said plurality of sets, said storage means for reading said pointing means to determine said least recently used entry of said plurality of entries of said particular set and for storing said instruction into said least recently used entry.</claim-text></claim-text></claim>"}, {"num": 10, "parent": 9, "type": "dependent", "paragraph_markup": "<claim num=\"10\"><claim-text>10. An instruction cache apparatus as described in claim 9 wherein said processing means updates said pointing means upon storage of said instruction by said storage means into said particular set of said cache memory means.</claim-text></claim>"}, {"num": 11, "parent": 10, "type": "dependent", "paragraph_markup": "<claim num=\"11\"><claim-text>11. An instruction cache apparatus as described in claim 10 wherein said processing means updates said pointing means by ordering each entry of each of said sets according to a last time each said entry was used for instruction storage by said storage means.</claim-text></claim>"}, {"num": 12, "parent": 10, "type": "dependent", "paragraph_markup": "<claim num=\"12\"><claim-text>12. An instruction cache apparatus as described in claim 10 wherein said first portion of said cache memory means that is blocked by said blocking means is that portion of said cache memory means that was most recently used for instruction storage by said storage means just prior to assertion of said blocking means.</claim-text></claim>"}, {"num": 13, "parent": 8, "type": "dependent", "paragraph_markup": "<claim num=\"13\"><claim-text>13. An instruction cache apparatus as described in claim 8 wherein said processing means updates said pointing means by ordering each entry of each of said sets according to a last time each said entry was accessed by said microprocessor.</claim-text></claim>"}, {"num": 14, "parent": 8, "type": "dependent", "paragraph_markup": "<claim num=\"14\"><claim-text>14. An instruction cache apparatus as described in claim 8 wherein said first portion of said cache memory means that is blocked by said blocking means is that portion of said cache memory means that was most recently used by said microprocessor just prior to assertion of said blocking means.</claim-text></claim>"}, {"num": 15, "parent": 8, "type": "dependent", "paragraph_markup": "<claim num=\"15\"><claim-text>15. An instruction cache apparatus as described in claim 8 further comprising:<claim-text>means for storing said particular plurality of user selected instructions into said cache memory means when said blocking means is not asserted, said particular plurality of instructions being loaded into said first portion of said cache memory means; and</claim-text><claim-text>means for asserting said blocking means after said particular plurality of instructions has been stored.</claim-text></claim-text></claim>"}, {"num": 16, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"16\"><claim-text>16. An instruction cache apparatus as described in claim 15 wherein said microprocessor executes said particular plurality of instructions when said blocking means is asserted so that said plurality of instructions is accessed via said cache memory means.</claim-text></claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim num=\"17\"><claim-text>17. An instruction cache apparatus as described in claim 16 wherein said means for asserting said blocking means disables said blocking means after execution time of said plurality of instructions is no longer critical.</claim-text></claim>"}, {"num": 18, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"18\"><claim-text>18. An instruction cache apparatus as described in claim 15 wherein said particular plurality of instructions comprises time critical instructions that must execute within a predetermined timing window.</claim-text></claim>"}, {"num": 19, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"19\"><claim-text>19. An instruction cache apparatus as described in claim 15 wherein said means for asserting said blocking means comprises said microprocessor executing a blocking instruction.</claim-text></claim>"}, {"num": 20, "parent": 15, "type": "dependent", "paragraph_markup": "<claim num=\"20\"><claim-text>20. An instruction cache apparatus as described in claim 15 wherein:<claim-text>said cache memory means comprises a two way set associative memory;</claim-text><claim-text>said pointing means comprises a logical pointer table having a bit pointer for each set of said plurality of sets of said cache memory means;</claim-text><claim-text>said processing means comprises a logical inverter for inverting said bit pointer for each set of said plurality of sets of said cache memory means;</claim-text><claim-text>said blocking means comprises a logical signal that is coupled to said processing means to functionally disable said processing means upon assertion; and</claim-text><claim-text>said means for asserting said blocking means comprises said microprocessor executing a blocking instruction.</claim-text></claim-text></claim>"}, {"num": 21, "parent": 8, "type": "dependent", "paragraph_markup": "<claim num=\"21\"><claim-text>21. An instruction cache apparatus as described in claim 8 wherein said cache memory means comprises a two way set associative memory.</claim-text></claim>"}, {"num": 22, "parent": 8, "type": "dependent", "paragraph_markup": "<claim num=\"22\"><claim-text>22. An instruction cache apparatus as described in claim 8 wherein said pointing means comprises a logical pointer having a bit pointer for said each set of said plurality of sets of said cache memory means.</claim-text></claim>"}, {"num": 23, "parent": 22, "type": "dependent", "paragraph_markup": "<claim num=\"23\"><claim-text>23. An instruction cache apparatus as described in claim 22 wherein said processing means comprises a logical inverter for inverting said bit pointer.</claim-text></claim>"}, {"num": 24, "parent": 8, "type": "dependent", "paragraph_markup": "<claim num=\"24\"><claim-text>24. An instruction cache apparatus as described in claim 8 wherein said blocking means comprises a logical signal that is coupled to said processing means to functionally disable said processing means upon assertion.</claim-text></claim>"}, {"num": 25, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"25\"><claim-text>25. An instruction cache apparatus for supplying instructions to a microprocessor, said instruction cache apparatus comprising:<claim-text>cache memory unit for providing storage of said instructions, said cache memory unit comprising a plurality of sets of storage locations, each set of said plurality of sets comprising a plurality of entries;</claim-text><claim-text>a logical pointer table for indicating a particular entry of said plurality of entries for each set of said plurality of sets, said particular entry being a least recently used entry of said plurality of entries for each set of said plurality of sets; and</claim-text><claim-text>a state machine for updating entries of said logical pointer table, said state machine responsive to a blocking signal and coupled to said logical pointer table,</claim-text><claim-text>said blocking signal for preventing said state machine from updating said logical pointer table such that said logical pointer table never indicates that instructions within a first portion of said cache memory unit are least recently used when said blocking signal is asserted, said instructions being user selected instructions.</claim-text></claim-text></claim>"}, {"num": 26, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"26\"><claim-text>26. An instruction cache apparatus as described in claim 25 further comprising:<claim-text>an external memory unit for holding a plurality of instructions; and</claim-text><claim-text>cache logic circuits for storing an instruction into said cache memory unit at a particular set of said plurality of sets, said cache logic circuits for reading said logical pointer table to determine said least recently used entry of said plurality of entries and for storing said instruction into said least recently used entry; and</claim-text><claim-text>wherein said state machine updates said logical pointer table upon storage of said instruction by said cache logic circuits into a particular set of said cache memory unit.</claim-text></claim-text></claim>"}, {"num": 27, "parent": 26, "type": "dependent", "paragraph_markup": "<claim num=\"27\"><claim-text>27. An instruction cache apparatus as described in claim 26 wherein said first portion of said cache memory unit that is blocked by said blocking signal is that portion of said cache memory unit that was most recently used by said cache logic circuits just prior to assertion of said blocking signal.</claim-text></claim>"}, {"num": 28, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"28\"><claim-text>28. An instruction cache apparatus as described in claim 25 wherein said first portion of said cache memory unit that is blocked by said blocking signal is that portion of said cache memory unit that was most recently used by said microprocessor just prior to assertion of said blocking signal.</claim-text></claim>"}, {"num": 29, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"29\"><claim-text>29. An instruction cache apparatus as described in claim 25 wherein:<claim-text>said microprocessor and said cache logic circuits store a particular plurality of instructions into said cache memory unit when said blocking signal is not asserted, said particular plurality of instructions being stored into said first portion of said cache memory unit; and wherein</claim-text><claim-text>said microprocessor executes an instruction that asserts said blocking signal after said particular plurality of instructions has been stored into said cache unit to insure that said plurality of instructions is subsequently accessible via said cache memory unit.</claim-text></claim-text></claim>"}, {"num": 30, "parent": 29, "type": "dependent", "paragraph_markup": "<claim num=\"30\"><claim-text>30. An instruction cache apparatus as described in claim 29 wherein said particular plurality of instructions comprises time critical instructions that must execute within a predetermined timing window.</claim-text></claim>"}, {"num": 31, "parent": 29, "type": "dependent", "paragraph_markup": "<claim num=\"31\"><claim-text>31. An instruction cache apparatus as described in claim 29 wherein said microprocessor disables said blocking signal when execution time of said plurality of instructions is no longer critical.</claim-text></claim>"}, {"num": 32, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"32\"><claim-text>32. An instruction cache apparatus as described in claim 25 wherein said cache memory unit comprises a two way set associative memory and said logical pointer table comprises a bit pointer for each set of said plurality of sets of said cache memory unit.</claim-text></claim>"}, {"num": 33, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"33\"><claim-text>33. An instruction cache apparatus as described in claim 25 wherein said state machine comprises a logical inverter for inverting entries of said logical pointer table and wherein said blocking signal is coupled to said state machine to functionally disable said logical inverter when said blocking signal is asserted.</claim-text></claim>"}, {"num": 34, "parent": 25, "type": "dependent", "paragraph_markup": "<claim num=\"34\"><claim-text>34. An instruction cache apparatus as described in claim 25 wherein:<claim-text>said cache memory unit comprises a two way set associative memory;</claim-text><claim-text>said logical pointer table comprises a bit pointer for each set of said plurality of sets of said cache memory unit;</claim-text><claim-text>said state machine comprises a logical inverter for inverting said bit pointer for said each set of said plurality of sets of said cache memory unit; and wherein said blocking signal is coupled to said state machine and selectively asserted to functionally disable said logical inverter of said state machine.</claim-text></claim-text></claim>"}, {"num": 35, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"35\"><claim-text>35. A system comprising:<claim-text>bus means for providing communication paths within said system; microprocessor means for executing instructions, said microprocessor means coupled to said bus means; external memory means for storing and retrieving said instructions and data, said external memory means coupled to said bus means, signal generation means for generating output signals, said signal generation means coupled to said bus means; and</claim-text><claim-text>instruction cache means for supplying instructions to said microprocessor means, said instruction cache means communicatively coupled to said bus means, said instruction cache means comprising:<claim-text>cache memory means for providing storage and retrieval of said instructions, said cache memory means comprising a plurality of sets of storage locations, each set of said plurality of sets comprising a plurality of entries;</claim-text><claim-text>pointing means for indicating a particular entry of said plurality of entries for each set of said plurality of sets, said particular entry being a least recently used entry of said plurality of entries for each set of said plurality of sets;</claim-text><claim-text>processing means for updating said pointing means, said processing means coupled to said pointing means; and</claim-text><claim-text>blocking means for preventing said processing means from updating said pointing means such that said pointing means never indicates that selected instructions within a first portion of said cache memory means are least recently used while said blocking means is asserted, said selected instructions being user selected instructions.</claim-text></claim-text></claim-text></claim>"}, {"num": 36, "parent": 35, "type": "dependent", "paragraph_markup": "<claim num=\"36\"><claim-text>36. A system as described in claim 35 further comprising:<claim-text>storage means for storing an instruction into said cache memory means at a particular set of said plurality of sets, said storage means for reading said pointing means to determine said least recently used entry of said plurality of entries of said particular set and for storing said instruction into said least recently used entry.</claim-text></claim-text></claim>"}, {"num": 37, "parent": 36, "type": "dependent", "paragraph_markup": "<claim num=\"37\"><claim-text>37. A system as described in claim 36 wherein said processing means updates said pointing means upon storage of said instruction by said storage means into said particular set of said cache memory means.</claim-text></claim>"}, {"num": 38, "parent": 37, "type": "dependent", "paragraph_markup": "<claim num=\"38\"><claim-text>38. A system as described in claim 37 wherein said processing means updates said pointing means by ordering each entry of each of said sets according to a last time each said entry was used for instruction storage by said storage means.</claim-text></claim>"}, {"num": 39, "parent": 37, "type": "dependent", "paragraph_markup": "<claim num=\"39\"><claim-text>39. A system as described in claim 37 wherein said first portion of said cache memory means that is blocked by said blocking means is that portion of said cache memory means that was most recently used for instruction storage by said storage means just prior to assertion of said blocking means.</claim-text></claim>"}, {"num": 40, "parent": 35, "type": "dependent", "paragraph_markup": "<claim num=\"40\"><claim-text>40. A system as described in claim 35 wherein said processing means updates said pointing means by ordering each entry of said each set according to a last time said each entry was accessed by said microprocessor means.</claim-text></claim>"}, {"num": 41, "parent": 35, "type": "dependent", "paragraph_markup": "<claim num=\"41\"><claim-text>41. A system as described in claim 35 wherein said first portion of said cache memory means that is blocked by said blocking means is that portion of said cache memory means that was most recently used by said microprocessor means before said blocking means was asserted.</claim-text></claim>"}, {"num": 42, "parent": 35, "type": "dependent", "paragraph_markup": "<claim num=\"42\"><claim-text>42. A system as described in claim 35 further comprising:<claim-text>means for storing a particular plurality of instructions into said cache memory means when said blocking means is not asserted, said particular plurality of instructions being loaded into said first portion of said cache memory means; and</claim-text><claim-text>means for asserting said blocking means after said particular plurality of instructions has been stored.</claim-text></claim-text></claim>"}, {"num": 43, "parent": 42, "type": "dependent", "paragraph_markup": "<claim num=\"43\"><claim-text>43. A system as described in claim 42 wherein said microprocessor means executes said particular plurality of instructions when said blocking means is asserted to insure that said plurality of instructions is accessed via said cache memory means and not by said external memory means.</claim-text></claim>"}, {"num": 44, "parent": 43, "type": "dependent", "paragraph_markup": "<claim num=\"44\"><claim-text>44. A system as described in claim 43 wherein said means for asserting said blocking means disables said blocking means when execution time of said plurality of instructions is no longer critical.</claim-text></claim>"}, {"num": 45, "parent": 42, "type": "dependent", "paragraph_markup": "<claim num=\"45\"><claim-text>45. A system as described in claim 42 wherein said particular plurality of instructions comprises time critical instructions that must execute within a predetermined timing window.</claim-text></claim>"}, {"num": 46, "parent": 42, "type": "dependent", "paragraph_markup": "<claim num=\"46\"><claim-text>46. A system as described in claim 42 wherein said means for asserting said blocking means comprises said microprocessor means executing a blocking instruction.</claim-text></claim>"}, {"num": 47, "parent": 42, "type": "dependent", "paragraph_markup": "<claim num=\"47\"><claim-text>47. A system as described in claim 42 wherein:<claim-text>said cache memory means comprises a two way set associative memory;</claim-text><claim-text>said pointing means comprises a logical pointer table having a bit pointer for each set of said plurality of sets of said cache memory means;</claim-text><claim-text>said processing means comprises a logical inverter for inverting said bit pointer for each set of said plurality of sets of said cache memory means;</claim-text><claim-text>said blocking means comprises a logical signal that is coupled to said processing means, said logical signal functionally disabling said processing means upon assertion; and</claim-text><claim-text>said means for asserting said blocking means comprises said microprocessor executing a blocking instruction.</claim-text></claim-text></claim>"}, {"num": 48, "parent": 35, "type": "dependent", "paragraph_markup": "<claim num=\"48\"><claim-text>48. A system as described in claim 35 wherein said cache memory means comprises a two way set associative memory.</claim-text></claim>"}, {"num": 49, "parent": 35, "type": "dependent", "paragraph_markup": "<claim num=\"49\"><claim-text>49. A system as described in claim 35 wherein said pointing means comprises a logical pointer table having a bit pointer for each set of said plurality of sets of said cache memory means.</claim-text></claim>"}, {"num": 50, "parent": 49, "type": "dependent", "paragraph_markup": "<claim num=\"50\"><claim-text>50. A system as described in claim 49 wherein said processing means comprises a logical inverter for inverting said bit pointers.</claim-text></claim>"}, {"num": 51, "parent": 35, "type": "dependent", "paragraph_markup": "<claim num=\"51\"><claim-text>51. A system as described in claim 35 wherein said blocking means comprises a logical signal that is coupled to said processing means, said logical signal functionally disabling said processing means upon assertion.</claim-text></claim>"}, {"num": 52, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"52\"><claim-text>52. A caching method for storing and supplying instructions to a microprocessor, said method comprising the steps of:<claim-text>providing a cache memory for storage and retrieval of said instructions, said cache memory comprising a plurality of sets of storage locations, each set of said plurality of sets comprising a plurality of entries;</claim-text><claim-text>indicating a particular entry of said plurality of entries for each of said sets, said particular entry being a least recently used entry of said plurality of entries for each of said sets, said step of indicating utilizing a logical pointer table;</claim-text><claim-text>updating said logical pointer table to reflect access of said entries of said plurality of sets; and</claim-text><claim-text>preventing said logical pointer table from indicating that user selected instructions within a first portion of said cache memory are least recently used, said step of preventing comprising the step of responding to the assertion of a blocking signal.</claim-text></claim-text></claim>"}, {"num": 53, "parent": 52, "type": "dependent", "paragraph_markup": "<claim num=\"53\"><claim-text>53. A caching method as described in claim 52 further comprising the steps of:<claim-text>storing an instruction into said cache memory at a particular set of said plurality of sets, said step of storing comprising the steps of reading said logical pointer table to determine said least recently used entry of said plurality of entries of said particular set and storing said instruction into said least recently used entry.</claim-text></claim-text></claim>"}, {"num": 54, "parent": 53, "type": "dependent", "paragraph_markup": "<claim num=\"54\"><claim-text>54. A caching method as described in claim 53 wherein said step of updating updates said logical pointer table upon storage of said instruction by said step of storing into a particular set of said cache memory.</claim-text></claim>"}, {"num": 55, "parent": 54, "type": "dependent", "paragraph_markup": "<claim num=\"55\"><claim-text>55. A caching method as described in claim 54 wherein said step of updating updates said pointer table by ordering each entry of each of said sets according to a last time each said entry was used for instruction storage by said step of storing.</claim-text></claim>"}, {"num": 56, "parent": 54, "type": "dependent", "paragraph_markup": "<claim num=\"56\"><claim-text>56. A caching method as described in claim 54 wherein said first portion of said cache memory that is blocked by said blocking signal is that portion of said cache memory that was most recently used for instruction storage by said step of storing just prior to assertion of said blocking signal.</claim-text></claim>"}, {"num": 57, "parent": 52, "type": "dependent", "paragraph_markup": "<claim num=\"57\"><claim-text>57. A caching method as described in claim 52 wherein said step of updating updates said logical pointer table by ordering each entry of each of said sets according to a last time each said entry was accessed by said microprocessor.</claim-text></claim>"}, {"num": 58, "parent": 52, "type": "dependent", "paragraph_markup": "<claim num=\"58\"><claim-text>58. A caching method as described in claim 52 wherein said first portion of said cache memory that is blocked by said blocking signal is that portion of said cache memory that was most recently used by said microprocessor before said blocking signal was asserted.</claim-text></claim>"}, {"num": 59, "parent": 52, "type": "dependent", "paragraph_markup": "<claim num=\"59\"><claim-text>59. A caching method as described in claim 52 further comprising the steps of:<claim-text>storing said user selected instructions into said cache memory when said blocking signal is not asserted, said user selected instructions being loaded into said first portion of said cache memory; and</claim-text><claim-text>asserting said blocking signal after said user selected instructions have been stored by said step of storing.</claim-text></claim-text></claim>"}, {"num": 60, "parent": 59, "type": "dependent", "paragraph_markup": "<claim num=\"60\"><claim-text>60. A caching method as described in claim 59 further comprising the step of said microprocessor executing said user selected instructions while said blocking signal is asserted to insure that said user selected instructions are accessed via said cache memory.</claim-text></claim>"}, {"num": 61, "parent": 60, "type": "dependent", "paragraph_markup": "<claim num=\"61\"><claim-text>61. A caching method as described in claim 60 further comprising the step of disabling said blocking signal when execution time of said user selected instructions is no longer critical.</claim-text></claim>"}, {"num": 62, "parent": 59, "type": "dependent", "paragraph_markup": "<claim num=\"62\"><claim-text>62. A caching method as described in claim 59 wherein said user selected instructions comprise time critical instructions that must execute within a predetermined timing window.</claim-text></claim>"}, {"num": 63, "parent": 62, "type": "dependent", "paragraph_markup": "<claim num=\"63\"><claim-text>63. A caching method as described in claim 62 wherein:<claim-text>said cache memory comprises a two way set associative memory;</claim-text><claim-text>said pointer table comprises a bit pointer for each set of said plurality of sets of said cache memory;</claim-text><claim-text>said step of updating is implemented using a logical inverter for inverting said bit pointers for each set of said plurality of sets of said cache memory;</claim-text><claim-text>said blocking signal functionally disables said logical inverter; and</claim-text><claim-text>said step of asserting said blocking signal is implemented by said microprocessor executing a blocking instruction when execution time of said user selected instructions is no longer critical.</claim-text></claim-text></claim>"}, {"num": 64, "parent": 59, "type": "dependent", "paragraph_markup": "<claim num=\"64\"><claim-text>64. A cache method as described in claim 59 wherein said step of asserting said blocking signal is implemented via said microprocessor executing a blocking instruction.</claim-text></claim>"}, {"num": 65, "parent": 52, "type": "dependent", "paragraph_markup": "<claim num=\"65\"><claim-text>65. A caching method as described in claim 52 wherein said cache memory comprises a two way set associative memory.</claim-text></claim>"}, {"num": 66, "parent": 52, "type": "dependent", "paragraph_markup": "<claim num=\"66\"><claim-text>66. A caching method as described in claim 52 wherein said pointer table comprises a bit pointer for said each set of said plurality of sets of said cache memory.</claim-text></claim>"}, {"num": 67, "parent": 52, "type": "dependent", "paragraph_markup": "<claim num=\"67\"><claim-text>67. A caching method as described in claim 52 wherein said step of updating is implemented using a logical inverter.</claim-text></claim>"}]}], "descriptions": [{"lang": "EN", "paragraph_markup": "<description lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PDES317659224\"><?BRFSUM description=\"Brief Summary\" end=\"lead\"?><h4>BACKGROUND OF THE INVENTION</h4><p>(1) Field of the Invention</p><p>The present invention relates to the field of memory accessing technology for the storage and retrieval of data and/or instructions from a memory unit. Specifically, the present invention relates to the field of memory cache technology employed to increase the speed and execution time predictability of instruction code processing or data processing.</p><p>(2) Prior Art</p><p>Among the many elements of a computer system are found a central processing unit (CPU), memory storage units (which may be RAM or ROM or otherwise), and interface and control logic units that couple the CPU to the memory storage units for accessing and processing of data and instructions. Generally, each time the CPU processes an instruction it must access a memory storage unit to gain desired data for processing or to obtain the execution instructions themselves, the opcodes, which reside in memory. The CPU is constantly interfacing with the memory storage units. Recent developments in computer technology have offered a variety of different types of memory storage units which are adapted for different functions and have different characteristics. Specifically, use of a cache memory unit and associated logic has become extremely popular because of the versatility, efficiency, and high speed accessing offered by the cache memory. Cache memories that store data used in a program are called data cache memory and cache memories that store program instructions, opcodes, are called instruction cache memories.</p><p>Opcodes or Instructions as Data</p><p>Machine code (assembly code) is the program code that a microprocessor interprets and processes directly. Each instruction of a program executed by a microprocessor is represented as data within a computer memory and is called instruction data. In order to execute a program, the microprocessor must read the memory to access the program steps or microcode instructions. These instructions are processed on a sequential basis and therefore the memory unit is generally accessed in such a way. The below syntax is an example of instruction data and program data:</p><p></p><pre listing-type=\"equation\" xml:space=\"preserve\"><!--Greenbook equation-->LOAD C, 08H.</pre><p>The above instructs the microprocessor to load the value of 08H into a register called \"C.\" The instruction, LOAD, to load register C, will have an associated numeric value which represents the load instruction and this value must be stored in memory. This value is called instruction data because it is data that represents the instruction. For sake of illustration, assume that the microprocessor instruction for loading register \"C\" with an immediate value is decoded into the value, 068H. In memory, the value of 068H is stored and is called instruction data. The value 08H is called program data bec