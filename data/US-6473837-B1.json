 embodiment, bus interface unit <b>37</b> may provide the MAB tag <b>4</b> clocks prior to providing the corresponding data, to allow selection of a load which accesses that corresponding fill data to be in the cache access stage during the clock cycle in which the fill data arrives at data cache <b>28</b> (and hence the fill data may be forwarded).</p><p>It is noted that the timing between the instruction pipeline stages above the dotted lines in FIGS. 4 and 5 and the memory operation pipeline stages below the dotted lines may be extended from those shown in FIGS. 4 and 5. For example, in FIG. 4, the address may not be generated exactly in the clock cycle immediately following the decode/dispatch cycle. Operands may not be available, or older instructions may be selected for address generation instead. Furthermore, a memory operation may not be scanned for access during the clock cycle the address is provided, as other older memory operations may be scanned instead.</p><p>Turning next to FIG. 6, a block diagram illustrating exemplary information which may be stored in one embodiment of an LS<b>1</b> buffer entry <b>90</b> is shown. Other embodiments are possible and contemplated.</p><p>LS<b>1</b> buffer entry <b>90</b> includes a valid field <b>92</b>A which indicates the validity of the entry as well as certain fields within the entry. For example, valid field <b>92</b>A may comprise a valid bit indicating whether or not the entry is valid, a data valid bit indicating whether or not store data is valid (if applicable), and an address valid bit indicating whether or not the data address is valid.</p><p>Type field <b>92</b>B stores the type of memory operation represented within LS<b>1</b> buffer entry <b>90</b>. The memory operation may be a load, a store, or a load/store (for load-op-store instruction as may occur in the x86 instruction set architecture). Load/store types may probe data cache <b>28</b> once, and forward the data based on the probe, then subsequently perform the store when the instruction is retired. Accordingly, load/store types may occupy a single entry for both the load and the store memory operations.</p><p>Address field <b>92</b>C stores the data address of the memory operation, and store data field <b>92</b>D stores the store data corresponding to a store memory operation. Instruction tag field <b>92</b>E stores the instruction tag assigned by reorder buffer <b>32</b> to the instruction corresponding to the memory operation. The instruction tag is used to capture the data address from address buses <b>44</b>. Additionally, the instruction tag may be used to determine when the corresponding instruction is retired by reorder buffer <b>32</b> and may be used for loads as the result tag for forwarding data. Data tag field <b>92</b>F stores the store data tag identifying the source of the store data for a store memory operation.</p><p>The address valid bit within valid field <b>92</b>A indicates if address field <b>92</b>C is valid. However, the data address may be provided by AGUs <b>42</b> and be selected for probing data cache <b>28</b> prior to the data address becoming valid in LS<b>1</b> buffer entry <b>90</b>. ATagM field <b>92</b>G is used to indicate that the address tag provided by AGUs <b>42</b> in the previous clock cycle matched instruction tag field <b>92</b>E for providing selection controls for port <b>0</b> mux <b>72</b> and port <b>1</b> mux <b>74</b>. In one embodiment, ATagM field <b>92</b>G may comprise a bit for each issue position to identify the issue position from which the data address is received. Accordingly, ATagM field <b>92</b>G may be used to determine which LS<b>1</b> entry should capture an address presented to LS<b>1</b> buffer <b>60</b> from one of segment adders <b>70</b>.</p><p>As illustrated in FIG. 4, removing an entry from LS<b>1</b> buffer <b>60</b> may be delayed from the clock cycle in which the entry is selected for probing. Accordingly, accessed bit <b>92</b>H is provided within LS<b>1</b> buffer entry <b>90</b>. Accessed bit <b>92</b>H may be set to indicate that the memory operation was selected in the previous clock cycle for probing, and therefore should not be selected in the present clock cycle. Certain types of memory operations may be predetermined to be performed non-speculatively according to the instruction set architecture employed by processor <b>10</b> or according to design choice. Non-speculative bit <b>92</b>I may be used to indicate such a memory operation.</p><p>Finally, a general control field <b>92</b>J may be included for additional control bits as desired. For example, an embodiment of processor <b>10</b> employing the x86 instruction set architecture may include control information specific to the x86 architecture within control field <b>92</b>J. For example, information related to the accessed segment, segment limit violations, and segment attributes may be stored in control field <b>92</b>J. Furthermore, information such as the size of the memory operation (i.e. number of contiguous bytes affected by the memory operation) may be included, as may be any other desired control information according to design choice.</p><p>Turning next to FIG. 7, a block diagram illustrating exemplary information which may be stored in one embodiment of an LS<b>2</b> buffer entry <b>94</b> is shown. Other embodiments are possible and contemplated.</p><p>LS<b>2</b> buffer entry <b>94</b> includes a valid field <b>96</b>A which indicates the validity of the entry as well as certain fields within the entry. For example, valid field <b>92</b>A may comprise a valid bit indicating whether or not the entry is valid, a data valid bit indicating whether or not store data is valid (if applicable), and a physical address valid bit indicating whether or not the physical data address is valid (i.e. whether or not a valid translation has been performed by data cache <b>28</b>).</p><p>LS<b>2</b> buffer entry <b>94</b> further includes a type field <b>96</b>B, an address field <b>96</b>C, a store data field <b>96</b>D, an instruction tag field <b>96</b>E, and a data tag field <b>96</b>F similar to the fields <b>92</b>B-<b>92</b>F described above. Additionally, store data field <b>96</b>D may be used in the case of a load which hits an older store within LS<b>2</b> buffer <b>62</b>. For these cases, the store instruction tag of the store which the load hits is stored into data field <b>96</b>D of the load entry. For subsequent reprobes, the older store can be located by comparing the store instruction tag instead of trying to scan for the address and prioritize the hits. Additional details regarding store to load forwarding for one embodiment of load/store unit <b>26</b> are provided further below. LS<b>2</b> buffer <b>94</b> further includes a nonspeculative bit <b>96</b>L similar to nonspeculative bit <b>92</b>I described above.</p><p>MAB tag field <b>96</b>G stores the MAB tag assigned by data cache <b>28</b> for a memory operation which misses. Similar to the accessed bit <b>92</b>H, accessed bit <b>96</b>H indicates that LS<b>2</b> buffer entry <b>94</b> has been selected to access data cache <b>28</b> and is not currently eligible or selection. Additionally, LS<b>2</b> buffer entry <b>94</b> includes a pipe field <b>96</b>I which tracks the pipe stage occupied by the memory operation stored in the entry after it has been selected. Pipe field <b>96</b>I may, for example, comprise a bit for each pipe stage. The bit for the first pipe stage may be set in response to selecting the memory operation in the entry, and then the field may be shifted each clock cycle as the memory operation progresses through the pipeline. Alternatively, an encoded value may be used. Information received from data cache <b>28</b> may be associated with the corresponding memory operation by scanning pipe fields <b>96</b>I for a memory operation which is in the pipe stage at which the information is generated.</p><p>As mentioned above, memory operations may remain in LS<b>2</b> buffer <b>62</b> after being retired by reorder buffer <b>32</b>. Retired bit <b>96</b>J is used to identify the entry as corresponding to an instruction which has been retired. Additionally, LS<b>2</b> buffer entry <b>94</b> includes an last in buffer (LIB) bit <b>96</b>K. LIB bit <b>96</b>K is used when comparing stores within LS<b>2</b> buffer <b>62</b> to loads probing data cache <b>28</b> for the first time. The last in buffer bit indicates that the store within the corresponding entry is the last (e.g. youngest) entry within the buffer to update the data address specified by that store. Accordingly, in the case in which multiple stores within the buffer are hit by a load, the store with the LIB bit set is selected as the store upon which the load is dependent. Complex hit prioritization logic may thereby be avoided. The same comparator circuitry used to compare probing loads against LS<b>2</b> buffer <b>62</b> may be used to compare probing stores as well. If a probing store hits a store in LS<b>2</b> buffer <b>62</b> for which LIB bit <b>96</b>K is set, the LIB bit <b>96</b>K is reset. Alternatively, a second bit may be set and interpreted as resetting LIB bit <b>96</b>K. LIB bit <b>96</b>K is set for a store buffer entry as the store buffer entry is allocated.</p><p>Miss bit <b>96</b>M is used to identify whether or not the memory operation stored in LS<b>2</b> buffer entry <b>94</b> is a miss in data cache <b>28</b>. Miss bit <b>96</b>M is set according to the hit/miss information provided by data cache <b>28</b> on hit/miss lines <b>82</b> (either on initial probe or reprobe). Additionally, LS<b>2</b> buffer entry <b>94</b> includes a self-modifying code (SMC) field <b>96</b>N for use with the SMC state machine described in more detail below for one embodiment of load/store unit <b>26</b>. Snoop resync bit <b>96</b>O is used to indicate synchronization due to snoops, as described below in more detail. Store load forward bit <b>96</b>P is used to signify that the current entry is a load which hits an older store within LS<b>2</b> buffer <b>62</b> (for which data is not available). Loads which hit earlier stores are selected for reprobing until the store data becomes available (at which time the data is forwarded for the load). A memory type field <b>96</b>Q is included in LS<b>2</b> buffer entry <b>94</b> as well. The memory type may be provided by data cache <b>28</b> upon translating the address of the memory operation. Among other things, the memory type may indicate if the memory operation is cacheable or non-cacheable. This information may be used for determining whether or not SMC checks are to be performed, according to one embodiment described below.</p><p>Finally, a general control field <b>96</b>R may be included for additional control bits as desired. For example, additional information from the translation of the address which is specific to the instruction set architecture. In on