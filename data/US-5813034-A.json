respective processor bus; and, each processor bus being coupled through respective low level cache memories to respective digital computers. With this multi-level distributed data processing system, each processor bus can be restricted in length and thus operate at a high speed; and at the same time, the maximum number of digital computers on each processor bus can equal maximum number of computers in the entire Pentium Pro system.</p><p>However, a problem can arise in the above multi-level distributed data processing system when two digital computers, which are on different processor busses, attempt to execute WRITE commands that modify the same data word. When such an event occurs, the two digital computers cannot be permitted to modify the same data word in their respective low level cache memory differently; otherwise, two different versions of the same data word would exist. But, since the two digital computers which are attempting to modify the data word are on different processor busses, those computers are usable to snoop on each others WRITE commands in order to avoid the problem.</p><p>Also, in the multi-level distributed data processing system, each high level cache memory needs to somehow keep track of which data words are modified in the low level cache memories to which it is coupled. Otherwise, each time a READ command occurs on the system bus for a data word which is stored in both the main memory and a particular high level cache memory, that high level cache memory must presume that the data word has been modified by a digital computer on its respective processor bus. This in turn requires the high level cache memory to respond to the READ command by retrieving the presumably modified data word and transferring it to the system bus. However, such action by the high level cache memory will be very time consuming as compared to simply reading the data word from the main memory if it has not actually been modified.</p><p>Accordingly, a primary object of the invention is to provide a multi-level distributed data processing system in which the above problems are overcome.</p><h4>BRIEF SUMMARY OF THE INVENTION</h4><p>In accordance with the present invention, a distributed data processing system is comprised of: a system bus having a main memory coupled thereto; multiple high level cache memories, each of which has a first port coupled to the system bus and a second port coupled to a respective processor bus; and, each processor bus is coupled to multiple digital computers through respective low level cache memories. Further, in accordance with the present invention, each low level cache memory stores data words with respective tag bits which identify each data word as being shared, modified or invalid but never exclusive; and, each high level cache memory stores data words with respective tag bits which identify each data word as being shared, modified, invalid, or exclusive.</p><p>With the above distributed data processing system, a digital computer begins the execution of a WRITE command by addressing its respective low level cache memory to try to obtain the data word that is to be modified. If the addressed data word is present in the low level cache memory and the shared tag bit is true, then a WRITE REQUEST is sent to the high level cache memory which is coupled to the computer via a processor bus. That high level cache memory then checks its own tag bits for the data word which is to be written. If the shared tag bit is true in the high level cache memory, it then sends a WRITE REQUEST on the system bus in order to prevent any other computer from modifying the same data word. Then, the high level cache memory sends a WRITE GRANT signal back to the low level cache memory; and it changes the tag for the data word which is to be written from shared to modified. On the other hand, if the exclusive tag bit is true in the high level cache memory, then the high level cache memory is able to send that the WRITE GRANT signal back to the low level cache memory without sending any signals on the system bus; and it changes the tag bits for the data word which is to be written from exclusive to modified.30</p><p>By comparison, if a data word for a WRITE command was permitted to be stored in a low level cache memory with the exclusive tag bit being true, then that data word could be modified by a digital computer without receiving any WRITE GRANT signal from a high level cache memory. Consequently, two computers on separate processor busses could modify the same data word in their respective low level cache memory differently.</p><p>Also, the high level cache memory tracks the data words that get modified by changing those tag bits for the data word from shared to modified or from exclusive to modified. Thereafter, if a READ command occurs on the system bus, the high level cache memory will not send the requested data word on the system bus unless it is storing that data word with a modified tag.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>FIG. 1 illustrates a distributed data processing system which constitutes one preferred embodiment of the present invention.</p><p>FIG. 2A shows the format in which data words are stored in the high level cache memories of the FIG. 1 data processing system.</p><p>FIG. 2B shows the format in which data words are stored in the low level cache memories of the FIG. 1 data processing system.</p><p>FIG. 3 shows a signal sequence which occurs in the FIG. 1 data processing system when a digital computer P1 reads a data word which is present in the main memory but not present in the low level cache memory or the high level cache memory for the P1 computer.</p><p>FIG. 4 shows a signal sequence which occurs in the FIG. 1 data processing system when a digital computer P20 reads the same data word which was previously read by the digital computer P1 in FIG. 3.</p><p>FIGS. 5A through 5D show a signal sequence which occurs in the FIG. 1 data processing system when the digital computer P1 executes a WRITE command for a shared data word which was previously read in FIGS. 3 and 4.</p><p>FIG. 6 shows a signal sequence which occurs in the FIG. 1 data processing system when the digital computer P1 reads a data word which is present in the main memory module but not present in the low level cache memory or the high level cache memory for the computer P1.</p><p>FIG. 7 shows a signal sequence which occurs in the FIG. 1 data processing system when the digital computer P1 reads a data word which is present in the high level cache memory, but not present in the low level cache memory, for the computer P1.</p><p>FIG. 8A illustrates a signal sequence which occurs in the FIG. 1 data processing system when the digital computer P1 initiates the execution of a WRITE command for an exclusive data word which was previously read in FIGS. 6 and 7.</p><p>FIG. 8B shows a signal sequence which completes the WRITE operation that is started in FIG. 8A, under the condition where the digital computers P1 and P20 are not attempting to write the same data word simultaneously.</p><p>FIGS. 8B' and 8C' show a signal sequence which completes the WRITE operation that is started in FIG. 8A, under the condition where the digital computers P1 and P20 are attempting to write the same data word simultaneously.</p><p>FIG. 9 shows a preferred circuit for each of the high level cache memories which are in the FIG. 1 system.</p><p>FIG. 10 shows how all of the modules in the high level cache memory of FIG. 9 interact during the signal sequences 31 and 32 of FIG. 3.</p><p>FIG. 11 shows all of the modules in the high level cache memory of FIG. 9 interact during the signal sequence 36 of FIG. 4.</p><p>FIG. 12 shows how all of the modules in the high level cache memory of FIG. 9 interact to during the signal sequences 40, 41, 42, and 45 of FIGS. 5A-5D.</p><p>FIG. 13 shows how all of the modules in the high level cache memory of FIG. 9 interact during the signal sequences 43 and 44 in FIGS. 5B and 5C.</p><p>FIG. 14 shows how all of the modules in the high level cache memory of FIG. 9 interact during the signal sequences 51, 52, 55 and 56 of FIG. 6.</p><p>FIG. 15 shows how all of the modules in the high level cache memory of FIG. 9 interact during the signal sequences 60, 61, 62, 70 and 71 in FIGS. 8A and 8B.</p><p>FIG. 16 shows how all of the modules in the high level cache memory of FIG. 9 interact during the signal sequences 60, 61, 62, and 64 in FIGS. 8A, 8B', and 8C'.</p><p>FIG. 17 shows how all of the modules in the high level cache memory of FIG. 9 interact during the signal sequences 83, 84, 85, and 86 in FIGS. 8B' and 8C'.</p><p>FIG. 18 shows one preferred internal structure for module 101 which is included within the high level cache memory of FIG. 9.</p><p>FIG. 19 shows an alternate preferred internal structure for module 101 which is included in the high level cache memory of FIG. 9.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION</h4><p>Referring now to FIG. 1, it shows a distributed data processing system 10 which incorporates the present invention. This data processing system 10 includes a main memory module 11 and an Input/Output module 12 which are coupled to a single system bus 13. In FIG. 1, the system bus is labeled S-BUS, the main memory module is labeled MM, and the input/output module is labeled I/O.</p><p>Also included in the data processing system 10 are multiple high-level cache memories 14, each of which has a first port coupled to the system bus 11 and a second port which is coupled to a respective processor bus 15. In FIG. 1, each high-level cache memory is labeled HL and each processor bus is labeled P-BUS.</p><p>Preferably, the number of high-level cache memories which couple to the system bus varies from one to five. In FIG. 1, only the first, second, and fifth high-level cache memories are illustrated; and the third and fourth high level cache memories are not shown but are indicated as a series of dots.</p><p>Further, in data processing system 10, each processor bus is coupled through respective low-level cache memories 16 to one or more digital computers 17. In FIG. 1, the low-level cache memories are labeled LL; and the digital computers are labeled P1 through P20.</p><p>Preferably, the number of digital computers on each processor bus ranges from one to four. This is illustrated in FIG. 1 wherein the computers P1-P4 are coupled through respective low-level cache memories to the first processor bus and there form a first data processing cluster 18a. Likewise, the computers P5-P8 are coupled through respective low-level cache memories to the second processing bus and there form a second data processing cluster 18b, etc.</p><p>Stored within the high level cache memories 14 are a plurality of data words, where each data word is a predetermined number of bits. Also, in each high level cache memory, each data word 20 is stored with a format 21 as shown in FIG. 2A. This format 21 includes a compare address CA and four tag bits E, S, M, and I. Only one tag bit is true at a time.</p><p>Tag bit E is the exclusive tag bit, and it is true when the data word is stored in just a single high level cache memory 14. Tag bit S is the shared tag bit, and it is true when the data word is stored in more than one of the high level cache memories 14. Tag bit M is the modified tag bit, and it is true when the data word has been modified by one of the computers which is coupled by the processor bus to the high level cache memory. Tag bit I is the invalid tag bit, and it is true when the data word in the high level cache memory cannot be used.</p><p>Similarly, stored within the low level cache memories 16 are a plurality of data words, where each data word is a predetermined number of bits. But in each low level cache memory, each data word 22 is stored with a format 23 as shown in FIG. 2B. This format 23 includes a compare address and just three of the above-described tag bits S, M, and I. Tag bit E, the exclusive bit, is always false.</p><p>Now, in order to illustrate the processes by which the data words and tag bits are loaded and modified in the high level cache memories and the low level cache memories, FIGS. 3 through 8C' are provided. Each of these figures is a simplified representation of the FIG. 1 system in which only two of the five data processing clusters are shown, but in which various signal sequences which occur during READ and WRITE operations are illustrated by dashed lines.</p><p>In FIG. 3, the dashed lines 31 and 32 identify two signal sequences which occur when the digital computer P1 executes a READ command for a data word which is present in the main memory module but not present in its low level cache memory or the high level cache memory for cluster 18a. In signal sequence 31, the READ command RD is initially transferred to the low level cache memory for the digital computer P1. Then, when that low level cache memory determines that it does not have the requested data word, the READ command RD is sent on the processor bus to the high level cache memory for cluster 18a. Later, when the high level cache memory for cluster 18a determines that it does not have the requested data word, the READ command is sent on the system bus to the main memory module MM.</p><p>In response, the main memory module sends the requested data word on the signal sequence 32 to the high level cache memory for the cluster 18a. That data word is then stored in the high level cache memory, where it is tagged as being exclusive; and this is indicated in FIG. 3 by the letter E. Thereafter, the data word is sent in the signal sequence 32 to the low level cache memory for the digital computer P1. But, in that low level cache memory, the data word is tagged as being shared; and this is indicated in FIG. 3 by the letter S.</p><p>Next, in FIG. 4, a process is illustrated wherein the digital computer P20 reads the same data word which was previously read by the digital computer P1 in FIG. 3. To perform this process, three signal sequences occur which are identified by the dashed lines 35, 36, and 37.</p><p>In the signal sequence 35, a READ command RD is sent from the digital computer P20 through its low level cache memory and the high level cache memory for cluster 18e to the main memory module. During the time that this READ command is present on the system bus, the high level cache memory for cluster 18a snoops on the system bus and senses that the READ command is for a data word which it has internally stored. This is indicated in FIG. 4 as snoop 36.</p><p>In response to the snoop operation 36, the high level cache memory for cluster 18a sends a SHARED control signal 37 on the system bus. This control signal 37 indicates to the high level cache memory for cluster 18e that the requested data word is shared. At the same time, the high level cache memory for cluster 18a changes its tag bits for the requested data word from exclusive to shared, and this is indicated in the high level cache memory for cluster 18a by the symbol E\u2192S.</p><p>Subsequently, the requested data word is sent from the main memory to module to the high level cache memory for cluster 18e. This passage of the data word occurs in the signal sequence 38. After this data word is stored in the high level cache memory for cluster 18c, the data word is sent in the signal sequence 38 to the low level cache memory for the digital computer P20. In both the high level cache memory for cluster 18e and the low level cache memory for computer P20, the data word is stored as shared; and this is indicated in those memories by the letter S.</p><p>Next, in FIGS. 5A through 5D, a process is illustrated whereby the digital computer P1 executes a WRITE command for the shared data word which was previously read in FIGS. 3 and 4. To begin this process, two signals occur which are indicated by the dashed lines 40 and 41 in FIG. 5A. Signal 40 is a WRITE REQUEST signal WR which is sent from the low level cache memory for the digital computer P1 to the high level cache memory for cluster 18a. Then, in response, a DEFER signal 41 is sent from the high level cache memory for cluster 18a to the low level cache memory for the digital computer P1.</p><p>Thereafter, a WRITE REQUEST signal WR 42 is sent from the high level cache memory for cluster 18a onto the system bus, and this is shown in FIG. 5B. This WRITE REQUEST signal is placed on the system bus so that it can be sensed by the high level cache memory for cluster 18e; and this sensing is indicated in FIG. 5B as a snoop operation 43.</p><p>In response to the snoop operation 43, the tag for the data word which was read during the process of FIG. 4 is changed from shared to invalid in the high level cache memory for cluster 18e. Then, the high level cache memory for cluster 18e sends an INVALIDATE command to the low level cache memory for the digital computer P20, and this as indicated as signal 44 in FIG. 5C. That command causes the tag for the data word which was read during the process of FIG. 4 to be changed from shared to invalid in the low level cache memory for computer P20. Each change in the tag bits in FIG. 5C is indicated by the symbol S\u2192I.</p><p>Concurrent with the operations of FIG. 5C, additional operations occur which are shown in FIG. 5D. Initially, the high level cache memory for cluster 18a changes its tag bits, for the data word which is used by the WRITE command, from shared to modified. Then, a WRITE GRANT signal WG is sent from the high level cache memory for cluster 18a to the low level cache memory for computer P1, and this is indicated as signal 45. In response, that low level cache memory changes its tag bits, for the data word which is used by the WRITE command, from shared to modified. Each change in the tag bits in FIG. 5D is indicated in FIG. 5D by the symbol S\u2192M.</p><p>Based on the signal sequences which have been described above in conjunction with FIGS. 5A-5D, it is evident that the execution of a WRITE command, which operates on shared data, is a complex operation. This is due to all of the signals which must be sent during the sequences 40-45. By comparison, when a WRITE command is executed which operates on exclusive data, the complexity is greatly reduced; and this will now be explained in conjunction with FIGS. 6-8C'.</p><p>To begin, in FIG. 6, the dashed lines 51 and 52 indicate two signal sequences which are used when the digital computer P1 initially reads a data word from the main memory module. These signal sequences 51 and 52 respectively correspond to the signal sequences 31 and 32 which were previously described in conjunction with FIG. 3. Due to the READ operation in FIG. 6, a data word is sent from the main memory module to the high level cache memory for cluster 18a and is therein tagged as exclusive. That same data word is then transferred to the low level cache memory for the digital computer P1 and is therein tagged as shared.</p><p>Later, the data word which is read during the FIG. 6 process may subsequently be deleted from the low level cache memory for the digital computer P1 but kept in the high level cache memory for cluster 18a. This will occur if the low level cache memory has a smaller storage capacity than the high level cache memory, and another READ command is executed which causes the data in the low level cache memory to be replaced.</p><p>After the above replacement occurs in the low level cache memory for the digital computer P1, that digital computer can again try to read the same data word which got replaced; and the execution of such a READ command is illustrated in FIG. 7. Initially, the READ command is sent from processor P1 to its low level cache memory. Then, when the low level cache memory determines that it does not have the requested data word, the READ command is sent as signal 55 to the high level cache memory for cluster 18a. That high level cache memory then determines that it stored the requested data word as exclusive data; and it returns the requested data word as signal 56 back to the low level cache memory for processor P1.</p><p>Now, suppose that processor P1 executes a WRITE command which uses the exclusive data word that is stored in the high level cache memory for cluster 18a. This execution of the WRITE command can occur in two different ways; one of which is illustrated in FIGS. 8A and 8B, and the other of which is illustrated in FIGS. 8A, 8B' and 8C'.</p><p>In FIG. 8A, the execution of the WRITE command by the digital computer P1 causes a WRITE REQUEST signal 60 to be sent from the low level cache memory for the digital computer P1 to the high level cache memory for cluster 18a. When the WRITE REQUEST signal is received, the high level cache memory for cluster 18a determines that it is internally storing, as exclusive data, the data word which is to be written. In response to that determination, the high level cache memory for cluster 18a sends a RETRY signal 61 back to the low level cache memory for the digital computer P1.</p><p>While the above-described signals 60 and 61 are occurring, the high level cache memory for cluster 18a also snoops on the system bus in order to see whether or not a WRITE REQUEST signal is being sent on the system bus by any other high level cache memory. This snoop operation is indicated in FIG. 8a as snoop 62; and the WRITE REQUEST signal which may or may not be present of the system bus from another high level cache memory is indicated as WR 63.</p><p>If no WRITE REQUEST signal is detected on the system bus which uses the same data word that digital computer P1 is attempting to WRITE, then the tag for that data word is changed from exclusive to modified in the high level cache memory for cluster 18a; and this is indicated by the symbol E\u2192M in FIG. 8B. Then, the execution of that WRITE command proceeds to completion by the signal sequence of FIG. 8B.</p><p>Conversely, if a WRITE REQUEST signal is detected on the system bus which uses the same data word which computer P1 is attempting to WRITE, then the tag for that data word is changed in the high level cache memory for cluster 18a from exclusive to invalid; and this is indicated by the symbol E\u2192I in FIG. 8B'. Then, the execution of the WRITE command proceeds to completion by the signal sequences which are shown in FIGS. 8B' and 8C'.</p><p>As a practical matter, the probability is extremely small that a WRITE REQUEST signal will occur on the system bus during the snoop operation 62 which uses the same data word that the digital computer P1 is attempting to write. Consequently, the execution of the WRITE command from the digital computer P1 will almost always proceed as shown in FIG. 8B.</p><p>In FIG. 8B, the low level cache memory for the digital computer P1 sends another WRITE REQUEST signal 70 back to the high level cache memory for cluster 18a. This second WRITE REQUEST signal is sent in response to the RETRY signal 61 which occurs in FIG. 8A. Then the high level cache memory for cluster 18a responds to the WRITE REQUEST signal 70, and the modified tag for the data word which is to be written, by sending a WRITE GRANT signal 71 back to the low level cache memory for the digital computer P1.</p><p>In FIG. 8B', the high level cache memory for cluster 18a responds to WRITE REQUEST signal 63 which occurred on the system bus by sending an INVALIDATE command 64 back to the low level cache memory for the digital computer P1. Also, in response to the WRITE REQUEST signal 63 on the system bus, another signal sequence 65 occurs in which the data word that is to be written by the digital computer P20 is transferred from the main memory to the high level cache memory for cluster 18e. There, the received data word is tagged as modified. Then, the same data word is transferred to the low level cache memory for the digital computer P20 where is it is also tagged as modified.</p><p>Thereafter, the signal sequence of FIG. 8C' occurs in which the second WRITE REQUEST signal 80 is sent to the high level cache memory for cluster 18a. In response to that WRITE REQUEST signal, and the invalid tag for the data word which is to be written, the high level cache memory for cluster 18a sends a DEFER signal 81 back to the low level cache memory for the digital computer P1. Then, the high level cache memory for cluster 18a sends a READ command 82 on the system bus for the data word which the digital computer P1 is attempting to write.