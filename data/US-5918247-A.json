iagram of FIGS. 5 and 6. Control logic 104 communicates with processor 102 by bus 109, receives the same address information sent on bus 110 from processor 102 to buffer 103, is coupled to buffer 103 by bus 108, and is coupled to external memory system 105 by bus 107, which may be part of bus 120. Control logic circuitry 104, like buffer 103, may be located external to chip 101.</p><p>As will be further described below, processor 102 will issue requests for data by issuing an address along bus 110 that is received by buffer 103. Buffer 103 will determine whether or not the requested data resides within buffer 103, and will return the requested data along bus 111 to processor 102 should buffer 103 contain the requested data.</p><p>If the requested data does not reside within buffer 103, then a request for that data will be passed on to memory system 105 along bus 120 in addition to a fetch being issued for the line containing the requested data. These requests will be sent to memory system 105, which will return the requested word and associated line of data to buffer 103 and processor 102.</p><p>The present invention describes the fetching of one line of instructions and/or data; however, the present invention may be implemented to fetch blocks of instructions and/or data of greater or lesser length.</p><p>Referring next to FIG. 2, there is illustrated a portion of buffer 103 having four lines 201-204. Line 201 includes tag 205, lo valid bits 209, 211, 213 and 215, and long words 210, 212, 214 and 216. Similarly, line 202 includes tag 206, valid bits 217, 219, 221 and 223, and long words 218, 220, 222 and 224. Similarly, line 203 includes tag 207, valid bits 225, 227, 229 and 231, and long words 226, 228, 230 and 232. And, similarly, line 204 includes tag 208, valid bits 233, 235, 237 and 239, and long words 234, 236, 238 and 240.</p><p>Note, in one embodiment of the present invention, as described above, a valid bit is provided for each long word within a line. In an alternative embodiment of the present invention, only one valid bit is provided for a whole line.</p><p>The circuitry illustrated in FIG. 2 receives address information from processor 102 on bus 110, which is provided to comparator circuits 250, 260, 270, and 280. Comparator 250 is associated with line 201, comparator 260 is associated with line 202, comparator 270 is associated with line 203, and comparator 280 is associated with line 204.</p><p>In one embodiment, tags 205-208 each include the address for their respective lines 201-204 minus the lower four bits, which are not used.</p><p>Comparator 250, upon receipt of the address from processor 102 will compare this address with the address for line 201 contained within tag 205. Comparators 260, 270, and 280 perform similar operations with respect to tags 206-208, respectively. The results of these comparisons are exited from comparators 250, 260, 270 and 280 and are provided along bus 108 to control logic 104.</p><p>FIG. 2 further illustrates that when an address is received from processor 102 on bus 110, it is received by tag 205. This illustrates that the requested address is stored within a line tag in buffer 103 when there is a miss on that address resulting in a fetch of that line from external memory system 105.</p><p>Buffer 103 has limited storage capacity. This implies that long words not used in the immediate future by processor 102 may not be in buffer 103 when a relevant address access occurs, as those long words will be dismissed (overwritten) because of prior accesses. Thus, a line fetch cancellation procedure provides for an improvement in utilization of buffer 103.</p><p>Referring next to FIGS. 5 and 6, there is illustrated a process in accordance with the present invention. This process will also be described with respect to FIGS. 1-4.</p><p>The process begins at step 501 and proceeds to step 502 where a request for an instruction (i.e., an address) is received from processor 102 along bus 110. Note, the following discussion will be with respect to the implementation of buffer 103 as an I-fetch buffer for fetching and storing instructions. However, the present invention may also be utilized for the fetching and storing of data other than instructions.</p><p>Thereafter, in step 503, this address is compared using comparators 250, 260, 270 and 280 with buffer entries, as described above with respect to FIG. 2. Furthermore, the requested address is compared with an address of a line that may be currently being fetched from memory system 105 (hereinafter referred to also as a current fetch). In other words, when the request of step 502 was received by control logic 104 and buffer 103, a fetch based on a previously received address may already have been initiated by control logic 104 and may still be occurring.</p><p>Referring to FIG. 3, there is illustrated a portion of control logic 104 illustrating the receipt of the requested address along bus 110 by both register 301 and comparator 302. Register 301 will contain the address of a current fetch. Comparator 302 compares the address in register 301 with the address of the current request from processor 102 and produces a hit signal if there is a match between the address of the current fetch and the address of the request from processor 102, and produces a miss signal if there is not a match. This hit/miss signal is further utilized within control logic 104, as described below.</p><p>Returning to FIGS. 5 and 6, in step 504, a determination is made whether or not there is a hit on any of the buffer entries. In other words, if the address received from processor 102 along bus 110 matches any of the addresses located in tags 205-208, a hit signal will be transmitted from the associated comparator in buffer 103 for transmission along bus 108 to control logic 104.</p><p>If a hit is received from any of comparators 250, 260, 270, 280, the process proceeds to step 505 wherein the instruction is retrieved from the buffer entry in which it is contained and is sent to processor 102 along bus 111. For example, if the received address matches the address contained within tag 206, comparator 260 will issue a hit signal along bus 108. This will be received by control logic 104, which will instruct buffer 103 (for example, by control lines on bus 108) to send the requested word from line 202 to processor 102.</p><p>If in step 504 there is not a hit on any of buffer entries 201-204, the process proceeds to step 506 to determine whether or not there is a hit on a current fetch as indicated by the hit/miss signal issued by comparator 302.</p><p>If there is a match between the address of the current fetch and the address of the processor request, then the process proceeds to step 517.</p><p>In step 517, the process will wait until the requested word is fetched during the current fetch from memory 105 to buffer 103. Thereafter, in step 518, the desired instruction will be retrieved from buffer 103 to processor 102. As an alternative to step 518, or in addition to step 518, the requested word can be directly fetched to processor 102. The process then returns to step 502.</p><p>Returning to step 506, if there is not a hit on any current fetch being performed, the process proceeds to step 514 for a determination of whether or not buffer 103 is implemented to include one valid bit for a whole line, as opposed to valid bits being implemented for each long word within a line. If one valid bit is implemented for each line, then the process proceeds to step 516, whereby control logic 104 cancels the current fetch being performed and the entire line being fetched is invalidated (i.e., any long words already retrieved into one of lines 201-204 are invalidated).</p><p>However, if a valid bit is implemented for each long word within a line, the process proceeds instead to step 515, whereby control logic 104 cancels the current fetch being performed, but does not invalidate any long words that have already been retrieved into buffer 103.</p><p>After either step 515 or step 516, the process proceeds to step 507 to initiate a fetch of the line containing the requested address.</p><p>In step 507, control logic 104 will initiate a fetch of the line containing the requested address. In step 508, a determination is made whether or not there has been an activation through typical programming means for an \"end of line\" fetch. Generally, a fetch of a line from memory system 105 will be performed in a wrap-around manner, whereby the entire line associated with the requested address will be retrieved from external memory system 105 regardless of where the requested address is contained within that line. In other words, if the requested address is located towards the end of a line, the fetch will retrieve the words to the end of that line and then will proceed to fetch the remaining words of that line beginning at the front end of the line. However, the present invention in one embodiment may be implemented to fetch words in a line beginning with the requested address and ending at the end of that line. This is shown by step 509. To implement this \"end of line\" fetch, valid bits associated with each long word of a line will be implemented. As each long word is fetched from external memory system 105 to buffer 103, the associated valid bit for that long word will be set.</p><p>Regardless of the outcome of decision block 508, the process eventually proceeds to step 510 for a determination of whether or not the fetch begins with the last M (M is a positive integer) long words of a line. In the present example and in one embodiment, M is equal to two. If yes, the process proceeds to step 511 to discontinue the fetch at the end of that line. However, if the fetch does not begin with the last two long words of the line, the process proceeds to step 512 to continue the fetch of the line in a wrap-around manner until the whole line has been fetched and retrieved into buffer 103. The process will then end at step 513.</p><p>Note, various different procedures could be used for replacing existing lines within buffer 103 with newly fetched lines. For example, a round-robin fetch procedure could be used whereby the replacement of lines 201-204 is performed in a sequential and cyclical manner. Alternatively, replacement of lines in buffer 103 could be performed in a least recently used (\"LRU\") manner.</p><p>Referring next to FIG. 4, there is illustrated a timing diagram showing how the cancellation of the current fetch noted in steps 515 and 516 is performed by control logic 104.</p><p>The first line of the timing diagram shows the clock signal. The next line of the timing diagram shows the transfer start signal, 