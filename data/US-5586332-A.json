 memory 20 and peripheral devices, such as I/O device 30, connected via a bus 40. The CPU may also have coupled to it a cache 50 for caching certain data to increase performance of the system. It has been realized that the execution of certain instructions, which subsequently are reflected as the issuance of certain bus cycles, occur which idle the CPU for a significant amount of time. Typically the CPU will continue to consume power while waiting for certain events to occur before processing is continued. For example, when a read to memory is performed, the CPU 10 will issue a bus cycle across the bus 40 to memory 20 to retrieve certain data. Once this bus cycle request is issued, the CPU 10 is idle until the reply including the data is sent back from the memory 20. Other cycles may be a I/O device read or write operation which similarly takes a significant amount of time during which the CPU 10 idles.</p><p>As power consumption has recently become an important issue to portable computing, it is critical that devices operate only when needed to minimize the amount of power consumed. Thus, a clock control circuit is introduced which monitors the operations of the CPU and shuts down the clock which drives components of the CPU during the portion of the execution of certain instructions during which the processor is idle.</p><p>An illustrative flowchart of the process is shown in FIG. 2. At step 300, an instruction execution or a bus cycle occurs. If the processor is to be idle during execution of the bus cycle, step 310, the clock is stopped to non-essential components 320 when the idle state is entered. It is preferred that the non-essential components are defined as those components which are not required to shut-down or restart the clock. Once the clock is stopped, step 320, the controller then monitors for the event which indicates that the processor is to exit the idle state and is to be restarted by restarting the clock, steps 330, 340. Once this event is detected, the clock is restarted 350 and normal processing continues. Thus, a method for reducing power consumption and apparatus is provided which does not have impact on performance and requires little modification to the processor.</p><p>FIG. 3a is a simplified block diagram of a microprocessor component such as the i486\u00ae microprocessor, manufactured by Intel Corporation, Santa Clara, Calif. (i486 is a registered trademark of Intel Corporation). In order that the processor may be stopped during execution of instructions, the processor should be static in nature such that the processor maintains its internal state when not operating. This characteristic is found in many processors, including the i486. Depending upon the configuration, the processor 100 may include a variety of components 110, 120, 130, 140, each of which is driven by a clock signal for its operation. In the present invention one dock signal 155, is input to the processor. A dock controller 170 is provided to generate two clock output clock signals CLK1 150, CLK2 160 and to control enabling and disabling of at least one of the clock output signals 150, 160. The output of the clock controller 170 provides the clock signal inputs to the various elements 110, 120, 130, 140.</p><p>It has been determined that a significant amount of time is spent by the CPU waiting for the return of data or a response from devices coupled with the CPU via the bus. For example, if an I/O read operation is to be executed, the CPU issues a bus cycle onto the bus 180 with command and address information regarding the I/O read operation. The CPU 100 enters an idle state, waiting for a response to be returned across the bus 180. To save on power while the CPU is in an idle state, the clock controller 170 determines when such commands are executed and stops the clock to the elements of the CPU.</p><p>In the present embodiment one clock input signal is provided 155 and one or two clock signals 150, 160 are output. The first clock CLK1 150 is turned off by the clock controller during predetermined periods to minimize power consumption and CLK2 160 is kept in an on state to drive those components which cannot be turned off during the idle state of the microprocessor. Thus, the clock controller 170 detects those instructions during which the processor 100 is idle or waiting for a response and turns off the clock CLK1 150 until such time that the CPU will begin execution. More particularly, the dock controller includes logic to detect the execution of certain commands or bus cycles, logic to stop the clock driving the selected components of the CPU 100, logic to detect when the CPU is to exit the idle state and logic to restart the clock so that the CPU again executes in a normal manner.</p><p>Furthermore, this mechanism can be extended to achieve power savings during memory write operations. In this embodiment, the mechanism detects internal stalls which occur during external memory write signals, typically when resources are unavailable. Thus, for example, in the i486 processor, an embodiment incorporating the processor dock is throttled during a memory write operation when the write buffer is full, the external bus is busy with a bus cycle and the instruction executing issues a memory write bus cycle (thereby causing the processor to stall). The clock would stop and be restarted when one or all of the conditions change.</p><p>In one embodiment, the clock controller 170 is located on the processor component. The input clock 155 is input to the component. The clock controller 170 is preferably driven by the input clock or CLK2 160 which remains on at all times. Those elements of the CPU which are used to stop and start the CLK1 150 are also maintained on at all times and therefore are driven by CLK2 160. Although different configurations may have different clock requirements, typically the remainder of the elements of the CPU 100 can be turned off during idle by stopping the clock input signal to those elements. As up to 90% of the power consumption of the CPU is attributed to those elements which can be turned off during idle, a substantial power savings is realized.</p><p>Although the present invention may be implemented in a variety of embodiments, it is preferred that it be implemented in a manner transparent to the system. In one embodiment, the clock controller 170 monitors the bus cycles issued to determined when predetermined bus cycles occur. These predetermined bus cycles indicate that the processor component 100 will be idled for a period of time exceeding the amount of time required to stop and restart the clocks signal input to the components. Thus, for example, the clock controller will detect I/O read cycles (single as well as string operations), I/O write cycles, non-cacheable memory data read cycles, the first memory data read of a cache line fill and processor specific cycles, such as halt and other special cycles. Preferably, the clock should not be stopped for the first cycle of a split cycle as the split cycle logic is still performing some operations. In addition, it is preferable that prior to stopping the clock, it is confirmed that the floating point unit is busy performing operations and a cache invalidation bus cycle is not in progess. Other bus cycles, depending upon the processor and system configuration, may be determined to be one during which the clock signal input is temporarily stopped.</p><p>Alternatively, as shown in FIG. 3b, the clock controller 270 may be located external to the processor component 200 and still control the clock input to the component 200 in the same manner described above by monitoring the bus cycles issued by the processor.</p><p>Referring back to FIG. 3a, in an alternative embodiment, the clock controller detects the execution of predetermined instructions to determine when to stop the clock signal input. Preferably this is performed by the microcode of the processor which monitors the instructions executed. The microcode issues a signal to the clock controller 270 at a predetermined point during execution of one of the predetermined commands to stop the clock signal input while the CPU is in an idle state. For example, immediately after detection of execution of a halt command, the clock signal input is stopped.</p><p>Preferably, the clock controller restarts the clock signal input and therefore the components of CPU prior to the event after which the CPU exits the idle state and continues normal processing. For example, if the CPU is idle during a memory read operation, it is preferred that the dock is restarted just prior to the data being available to the CPU on the bus. In one embodiment, the clock controller detects the event and immediately restarts the bus. However, latency may occur if the clock is not restarted fast enough. For example, data incoming on the bus takes one clock cycle to latch the data prior to the data being available to the CPU. In order to maintain no latency, the clock controller should detect the incoming data and restart the clock within the dock cycle. However, power savings benefits are still realized even if latency is introduced. Thus, the power saving feature may be provided as a switchable option such that a user requiring the power saving feature would incur an additional wait state during the execution of the predetermined instructions. Furthermore, specific instructions and bus cycles can be segregated into groups according to potential latency/no latency, such that clock throttling for specified groups can be selectively enabled and disabled.</p><p>As shown in FIG. 3c, the system may also be implemented in an integrated CPU core. In this embodiment the bus operations and local memory on the component are monitored to determined when to stop and restart the clock. The controller monitors the bus as well as signals to the local memory to determine those cycles in which the processor will be idle for some period of time. In this embodiment an internal ready signal may be utilized to detect when to restart the clock. The internal ready signal is detected during an earlier clock cycle such that sufficient time is provided to restart the clock.</p><p>In another embodiment, as illustrated in FIG. 3d, an external pin, referred to herein as a \"clock throttle pin\" 310 is provided. This pin is accessible by user hardware. If the user pulls the pin, for example, active, the clock signals to most of the CPU core are stopped. The user would subsequently deassert a signal on this pin before continuing normal operation. Preferably an internal mechanism is provided to disable the clock throttle pin based on certain conditions, for example a split cycle, during which it is not preferred to perform clock throttling.</p><p>In this embodiment, the clock mechanism is visible and controllable external to the CPU. Therefore, external chip sets which operate with the CPU or other external logic 315 is needed to control the clock throttling. Furthermore, this embodiment monitors the bus external to the CPU to detect stall conditions during which clock throttling can be performed. Although this mechanism does not monitor for split cycles or other conditions during which it is not desirable to stop the clock, this embodiment can be used to throttle clocks for large portions of other bus cycles, with long wait states which are not typically throttled by an external mechanism, with little or no loss of performance. For example, if access is made to a slow memory or other internal device, by monitoring externally, clock throttling can be extended for additional cycles beyond the external CPU core cycles.</p><p>The power savings is directly proportional to the bus utilization and bus cycle mix. Thus, for example, a system with a 50% bus utilization may have the dock stopped for about 15-25% of the time given an exemplary system in which all I/O cycles on the external bus are assumed to be 5 clock cycles in duration and all other types of cycles, for example DMA, are assumed to be 9 external bus clock cycles in duration. Thus, power savings as shown in FIG. 4a and 4b can be realized. FIG. 4a illustrates power savings for an external bus running at  1/4 of the frequency of the processor bus; FIG. 4b illustrates power savings realized for a system having an external bus operating at the same frequency as the processor bus. Therefore, if a system has a rate of clock throttle of approximately 20%, and assuming 50% power reduction due to clock throttle, an overall active power savings of 10-30% will be realized.</p><p>The invention has been described in conjunction with the preferred embodiment. It is evident that numerous alternatives, modifications, variations and uses will be apparent to those skilled in the art in light of the foregoing description. In particular, it is readily evident that the clock throttling mechanism described can be applied to a variety of components including CPUs and other processors. Furthermore, it is evident that the mechanism is extendible to a multiple processor environment or to a processor with multiple executi