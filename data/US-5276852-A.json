tem interface by the invention.</p><p>The invention is an apparatus to control a write-back cache, comprising: a processor bus; a system interface for connection to a system bus, the system interface also providing a connection to the processor bus; a processor, the processor connected to the processor bus, the processor being a commander node for the processor bus; a cache memory, the cache memory connected to the processor bus; a cache controller, the cache controller connected to the processor bus; first request means for the cache controller to request control of the processor bus, the request directed to the processor; means for the processor to grant command of the processor bus to the cache controller; and a second request means for the system interface to request command of the processor bus from the cache controller. And the invention has a means, responsive to the second request means, for the cache controller to grant command of the processor bus to the system interface. As a result, the processor and the cache memory perform a write-back protocol by the cache controller granting control of the processor bus to the system interface, for the system interface to perform writeback transfers of data between the cache memory and the system bus.</p><p>Also the invention has a means for the cache controller to take control of the processor bus from the processor. The means for the cache controller to take control of the processor bus from the processor is a means for the cache controller to assert a retry signal; and, a means for the processor to give command of the processor bus to the cache controller upon receipt of the retry signal.</p><p>Other and further aspects of the present invention will become apparent in the course of the following description, and will be referenced to the accompanying drawings.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>BRIEF DESCRIPTION OF THE DRAWINGS</h4><p>Referring now to the drawings in which like numerals represent like parts in the several views:</p><p>FIG. 1 is a block diagram of a multi-processor computer system according to the invention.</p><p>FIG. 2 is a block diagram of a processor module in accordance with the invention.</p><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"tail\"?><?DETDESC description=\"Detailed Description\" end=\"lead\"?><h4>DETAILED DESCRIPTION</h4><p>Referring now to FIG. 1, multi-processor computer system 100 is shown. Multi-processor computer system 100 comprises a system bus 110, a first processor CPU module 120A, a second processor CPU module, indicated as \"Module K\" 120B, a third processor CPU module indicated as \"Module K+1\" 120C, and an N'th module 120D. For example, the number of processor modules included in the multi-processor system may be 2 processors, 8 processors, 16 processors, or any convenient number of independent processors. Each of the processors, 120A, 120B, . . . communicate via the system bus 110.</p><p>Also communicating on system bus 110 is the main memory 130. Also a system input/output, referred to as an I/0 module 140, also communicates on system bus 110.</p><p>An overview of the internal structure of a CPU module is shown at module 120B. The module shown at 120B gives the internal structure of the other CPU module, 120A, 120C, 120D, etc. Internal to the CPU processor, as shown by module 120B, is a system interface 150. Connected to the system interface 150 is processor bus 152. Communicating on processor bus 152, in addition to the system interface 150, are the processor 154 the cache controller 156, and the cache memory 158. The cache memory 158 comprises the cache data of the CPU module 120B. The cache controller 156 derives signals both from the processor bus 152 and from an invalidate bus 160. The invalidate bus 160 transfers signals between the system interface 150 and the cache controller 156.</p><p>Control of the cache memory 158 is accomplished by cache controller 156 along connection 162. The cache memory transfers data to and from processor 154 through connection 164 to the processor bus 152, and also accomplishes data transfers to and from system bus 110 through processor bus 152 and system interface 150.</p><p>A general description of operation of a processor module, such as CPU model 120B, follows. Main memory 130 is the shared storage resource for data and instructions for all of the processor modules, 120A . . . 120D, etc. When a processor, such as processor 154 in CPU module 120B, desires to read data from main memory 130, the read request goes first to the cache memory 158 on the module board of the processor, such as shown for CPU module 120B. In the event that the requested data is in cache 158, and the requested data is neither \"invalid\" nor \"dirty\" disclosed in detail herein below, then the data in cache 158 is delivered to processor 154 through connection 164 and the processor bus 152. In the event that the requested data is not in cache 158, then a request is generated and transmitted by system interface 152 to main memory 130 through system bus 110, and the data in main memory 130 is read. Reading the data from main memory 130 by processor 154 comprises transferring the requested data through system interface 150 to cache 158, where the data is then transferred from cache 158 to processor 154.</p><p>Data in main memory 130 is stored in blocks, and each block has a starting address, and the data within the block may be referenced by reference to the starting address. The data stored in cache 158 carries with it the starting address of main memory in order that the location in main memory of the origin of the cache data may be identified.</p><p>The cache controller 156 contains information, known as a tag store, that denotes the state of the cache memory 158. This tag store maintains the status of each block of the cache.</p><p>For every block of data in the cache memory 158 there is a related cache entry in the tag store. This tag entry consists of an address portion and state bits. The address portion of the tag entry is the portion of the address that is not used to access the cache memory 158. Because many addresses can access the same cache memory 158 location, the address portion of the tag entry is maintained to keep track of the complete main memory 130 address of the data currently in the cache.</p><p>Each block of cache memory 158 is organized as four subblocks. The subblock is also known as the \"fill\" block and is the amount of data that is actually brought into the cache during read and ownership requests from memory.</p><p>The state bits in the tag store are known as valid bits and dirty bits. Each subblock has an associated valid bit and a dirty bit to designate its status. The valid bit is used to indicate that a cache block is resident in the cache memory 158. The dirty bit is used in the \"writeback protocol\" to denote \"write-ownership\", meaning that the associated processor can write to the block.</p><p>In the event that another CPU module, say CPU module 120C, attempts to write to main memory into the block having a starting address, for the same block as stored in cache 158, a status bit in cache 158 is set to \"invalid\". Thus the invalid status bit in cache 158 indicates that the data in cache 158 differs from the most recent update of data in the same block in main memory 130.</p><p>In the event that processor 154 attempts to read data from a block marked \"invalid\" in cache 158, then a cycle is initiated wherein the current values of the data in main memory 130 are transferred to cache 158 before processor 154 is permitted to read the data. These transfers of data from main memory 130 to cache 158 are referred to as \"cache fills\".</p><p>Blocks of data stored in cache 158 have an additional status bit called the \"dirty\" bit, and this bit is set to \"clean\" or \"dirty\" depending on whether the information in the cache differs from that in main memory 130. That is, in the event that processor 154 writes to the data in cache 158, then the cache 158 data is the most current data and differs from its counterpart in main memory 130, and this condition requires that the dirty bit be set to \"dirty\".</p><p>In the event that another processor, such as CPU module 120C, desires to read a block of data that is in another processor's cache (with, therefore, the corresponding cache dirty bit set to \"dirty\"), then a cycle is initiated wherein the most up-to-date value of that data is transferred from a cache, such as cache 158, to main memory 130. After the transfer to main memory 130 is completed, then the data is transferred from main memory 130 to a corresponding cache in the CPU module, such as CPU module 120C, desiring to read that data.</p><p>System interface 150 snoops on system bus 110 in order to monitor all read and write transactions of the various processors, 120A . . . 120D. A snooping protocol is invoked between system interface 150 and cache controller 156 through the invalidate bus 160.</p><p>Referring now to FIG. 2, processor bus 152 is shown comprising a D<sub>--</sub> Bus 152D, and A<sub>--</sub> Bus 152A, and a \"DAL and Systems Control Bus\" 152SC. Also shown in FIG. 2 is a vector interface bus 170, a clock bus 172, and the invalidate bus 160. The D<sub>13</sub> Bus, 152D, portion of the processor bus is a data bus, the A<sub>--</sub> Bus, 152A, is an address bus, and the \"DAL and Systems Control Bus\" 152SC carries control signals for the D<sub>13</sub> Bus 152D and the A<sub>--</sub> Bus 152A.</p><p>Also shown in FIG. 2 is the cache control chip 156, the control connection 162 between the cache control chip 156 and the cache memory 158. The processor chip 154 is shown with a connection to a floating point processor chip 178. Also shown are two further storage and control chips, SSSC chip 180 the systems support chip which includes battery backed up RAM, bus reset logic, time of year clock, etc. The ROM EEPROM 182 contains data, date, etc., information.</p><p>In performing the cache write-back protocol the processor chip 154, the cache controller chip 156, and the system interface 150 must, at various times, each gain control of the processor bus 152, shown in FIG. 2 as the D<sub>13</sub> Bus 152D, the A<sub>--</sub> Bus 152A, and the \"DAL and Systems Control Bus\" 152SC.</p><p>A direct memory access, or DMA transfer, is a data transfer transaction between main memory 130 and any non-processor chip on CPU module 120B. DMA transactions pass through system interface 150.</p><p>Various aspects of the buses and signals carried thereon will next be described.</p><p>Data and Address Buses</p><p>The data and address buses D<sub>--</sub> BUS 152D and A<sub>--</sub> BUS 152A, plus their associated signals, DAL and System Control 152SC, are collectively known as the DAL. DAL is an acronym for \"Data and Address Lines\". The DAL carries the main data, address, and status lines used for inter-chip and system communication on processor module 120B. These signals are asynchronous only in the sense that they may change as long as AS<sub>--</sub> L (discussed further hereinbelow) is deserted. If AS<sub>--</sub> L is asserted, these signals are interpreted on a per-transaction basis.</p><p>The following shorthand notation is introduced, processor 154 is referred to as the P-Chip, and cache controller 156 is referred to as the C-Chip.</p><p>D<sub>--</sub> BUS - Data Bus The D<sub>--<