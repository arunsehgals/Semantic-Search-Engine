a cache memory system is provided that includes a first register stack, a second register stack and stack control logic. The first register stack includes registers for holding entry address information. The stack control logic includes logic for inhibiting the placement of invalidated entry addresses into a Most Recently Used register in the first register stack and directs that such invalidated entry addresses be input into the second register. The stack control logic further directs that any new entry addresses be placed in the first register stack where invalidated entry addresses has resided. A counter keeps count of the number of invalidated entry addresses input into the second register stack and toggles a multiplexer at a Least Recently Used Entry output of the first register stack to select as its output, the output of the second register stack. In this manner, invalidated entry address are output from the cache through the second register stack while valid Least Recently Used entry addresses remain in the first register stack.</p></abstract>"}, {"lang": "EN", "paragraph_markup": "<abstract lang=\"EN\" load-source=\"patent-office\" mxw-id=\"PA37814519\"><p>An architecture and method of implementing an invalid data handling least recently used replacement mechanism in a cache memory system is provided that includes a first register stack, a second register stack and stack control logic. The first register stack includes registers for holding entry address information. The stack control logic includes logic for inhibiting the placement of invalidated entry addresses into a Most Recently Used register in the first register stack and directs that such invalidated entry addresses be input into the second register. The stack control logic further directs that any new entry addresses be placed in the first register stack where invalidated entry addresses has resided. A counter keeps count of the number of invalidated entry addresses input into the second register stack and toggles a multiplexer at a Least Recently Used Entry output of the first register stack to select as its output, the output of the second register stack. In this manner, invalidated entry address are output from the cache through the second register stack while valid Least Recently Used entry addresses remain in the first register stack.</p></abstract>"}], "claims": [{"lang": "EN", "claims": [{"num": 1, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"1\"><claim-text>1. A method of executing a Least Recently Used replacement mechanism in a computer, wherein the computer comprises an address content addressable memory and a register stack comprising at least an N most recently used entry register, an N+1 next most recently used entry register and an N+Z least recently used entry register, wherein in N is any integer equal to or greater than 0, and Z is any integer equal to or greater than 2, wherein each register comprises a content that includes a binary number capable of representing an entry address, the method comprising the steps of:<claim-text>(a) determining if a cache memory access operation in the address content addressable memory is being performed;</claim-text><claim-text>(b) generating a new entry address, if the cache memory access operation indicates a positive match in the address content addressable memory;</claim-text><claim-text>(c) transmitting the new entry address to a plurality of entry address comparators in the register stack;</claim-text><claim-text>(d) comparing the new entry address to entry addresses stored to in each register of the register stack except the Nth register;</claim-text><claim-text>(e) identifying an N+M register in the register stack that comprises the entry address; M being in the range of 1 to Z; and</claim-text><claim-text>(f) shifting the contents of registers N through N+M-1 to registers N+1 through N+M while shifting the new entry address into the Nth register.</claim-text></claim-text></claim>"}, {"num": 2, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"2\"><claim-text>2. The method of claim 1 wherein the step of determining if a cache memory access operation in the address content addressable memory is being performed includes the step of determining if a compare operation is being performed in the address content addressable memory.</claim-text></claim>"}, {"num": 3, "parent": 1, "type": "dependent", "paragraph_markup": "<claim num=\"3\"><claim-text>3. The method of claim 1 wherein the step of determining if a cache memory access operation in the address content addressable memory is being performed includes the step of determining if an address write operation is being performed in the address content addressable memory.</claim-text></claim>"}, {"num": 4, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"4\"><claim-text>4. In a multi-way cache memory system having an address content addressable memory, a dynamic entry address bus, a LPU register stack, stack control logic and wherein the first register stack includes at least an N and an N+1 next entry register for storing entry addresses wherein N is any integer equal to or greater than zero and wherein the N and the N+1 next entry registers comprise entry addresses, a method of handling invalidated entry or way addresses in a register stack used to implement a Least Recently Used replacement algorithm for a multi-way cache memory comprising the step of inhibiting an update of the LRU register stack during a snoop compare operation caused by a snoop cycle, wherein the step comprises the steps of:<claim-text>(a) sensing a cache memory access operation in the address content addressable memory;</claim-text><claim-text>(b) sensing a snoop cycle in the address content addressable memory; and</claim-text><claim-text>(c) generating an inhibit signal responsive to the cache memory operation being executed in the address content addressable memory and the snoop cycle being executed in the address content addressable memory, wherein said generating step comprises the steps of:<claim-text>(1) sensing an address compare operation in the address content addressable memory or</claim-text><claim-text>(2) sensing an address write operation in the address content addressable memory.</claim-text></claim-text></claim-text></claim>"}, {"num": 5, "parent": 4, "type": "dependent", "paragraph_markup": "<claim num=\"5\"><claim-text>5. The method of claim 4 wherein the step of generating an inhibit signal further comprises the step of sensing an address write enable signal to determine whether an entry address invalidation operation is initiated.</claim-text></claim>"}, {"num": 6, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"6\"><claim-text>6. In a multi-way cache memory system having an address content addressable memory, a dynamic entry address bus, a first register stack, a second register stack, stack control logic, a counter, a multiplexer in circuit communication with the first register stack and the second register stack and wherein the first register stack includes at least an N and an N+1 next entry register for storing entry addresses wherein N is any integer equal to or greater than zero and wherein the N and the N+1 next entry registers comprise entry addresses, and wherein the second register stack includes at least an M invalid entry register for storing invalidated entry addresses wherein M is any integer equal to or greater than zero, a method of handling invalidated entry or way addresses in a register stack used to implement a Least Recently Used replacement algorithm for a multi-way cache memory comprising the steps of:<claim-text>(a) sensing an address invalidation operation in the stack control logic; wherein the step of sensing a snoop cycle in the stack control logic includes the steps of:<claim-text>(1) sensing an address write operation; and</claim-text><claim-text>(2) sensing a snoop cycle;</claim-text></claim-text><claim-text>(b) outputting an entry address that corresponds to the system address on the dynamic entry address bus;</claim-text><claim-text>(c) outputting an invalid entry address signal from the stack control logic;</claim-text><claim-text>(d) directing the entry address through the multiplexer to the M register as a function of a value of said counter;</claim-text><claim-text>(e) recognizing that the second register stack includes at least one entry address; and</claim-text><claim-text>(f) incrementing said counter to indicate number of entry addresses stored in the second register stack.</claim-text></claim-text></claim>"}, {"num": 7, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"7\"><claim-text>7. The method of claim 6 wherein the second register stack further includes at least an M+1 invalid entry register and wherein the method further comprises the step of shifting the contents of the M invalid entry register to the M+1 invalid entry register if the second register stack includes at least one entry address.</claim-text></claim>"}, {"num": 8, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"8\"><claim-text>8. The method of claim 6 wherein the step of sensing said address invalidation operation further comprises the steps of:<claim-text>(a) sensing said address write operation; and</claim-text><claim-text>(b) sensing valid bit status information.</claim-text></claim-text></claim>"}, {"num": 9, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"9\"><claim-text>9. The method of claim 6 further comprising the step of inhibiting an update operation in first register stack.</claim-text></claim>"}, {"num": 10, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"10\"><claim-text>10. the method of claim 6 further comprising the step of outputting an entry address from the second register.</claim-text></claim>"}, {"num": 11, "parent": 6, "type": "dependent", "paragraph_markup": "<claim num=\"11\"><claim-text>11. The method of claim 6 further comprising the step of decrementing said counter upon utilizing said invalidated entry address for storing new entry address information.</claim-text></claim>"}, {"num": 12, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"12\"><claim-text>12. In a multi-way cache memory system having an address content addressable memory, a dynamic entry address bus, a first register stack, a second register stack, stack control logic, a counter, a multiplexer in circuit communication with the first register stack and the second register stack and wherein the first register stack includes at least an N and an N+1 next entry register for storing entry addresses wherein N is any integer equal to or greater than zero and wherein the N and the N+1 next entry registers comprise entry addresses, and wherein the second register stack includes at least an M invalid entry register for storing invalidated entry addresses wherein M is any integer equal to or greater than zero, a method of handling invalidated entry or way addresses in a register stack used to implement a Least Recently Used replacement algorithm for a multi-way cache memory comprising the steps of:<claim-text>(a) invalidating a system address stored in the address content addressable memory;</claim-text><claim-text>(b) outputting an invalidated entry address from the address content addressable memory to the dynamic entry address bus;</claim-text><claim-text>(c) inputting the invalidated entry address from the dynamic entry address bus to the M invalid entry register of the second register stack;</claim-text><claim-text>(d) setting a flag to indicate that the second register stack includes at least one entry address;</claim-text><claim-text>(e) incrementing said counter to indicate the number of entry addresses stored in the second register stack;</claim-text><claim-text>(f) shifting the address information in the N entry register to the N+1 next entry register in the first register stack; and</claim-text><claim-text>(g) storing a subsequent entry address in the N entry register of the first register stack.</claim-text></claim-text></claim>"}, {"num": 13, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"13\"><claim-text>13. The method of claim 12 further comprising the step of outputting entry address information stored in the second register stack.</claim-text></claim>"}, {"num": 14, "parent": 13, "type": "dependent", "paragraph_markup": "<claim num=\"14\"><claim-text>14. The method of claim 13 further comprising the step of decrementing the counter to indicate number of entry addresses stored in the second register stack.</claim-text></claim>"}, {"num": 15, "parent": 12, "type": "dependent", "paragraph_markup": "<claim num=\"15\"><claim-text>15. The method of claim 12 wherein the step of invalidating said system address represented by the entry address stored in the N+1 next entry register of the first register stack by a snoop cycle comprises the steps of:<claim-text>(a) sensing an address write operation in the address content addressable memory; and</claim-text><claim-text>(b) sensing valid bit status information associated with the system address.</claim-text></claim-text></claim>"}, {"num": 16, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"16\"><claim-text>16. A Least Recently Used Replacement architecture for a cache memory comprising:<claim-text>(a) an N-way addressable content addressable memory for maintaining correspondence between system addresses and way addresses;</claim-text><claim-text>(b) an N-way data array in circuit communication with the N-way addressable content addressable memory and for storing data;</claim-text><claim-text>(c) an N-entry register stack for storing entry addresses, wherein the N-entry register stack comprises at least a first register, an intermediate register and a last register, wherein each register comprises a plurality of bits, wherein the plurality of bits comprises a number of bits associated with a binary address of each entry stored in the addressable content addressable memory;<claim-text>wherein in the intermediate and last register further comprise a comparator for comparing a new entry address to the stored entry address;</claim-text><claim-text>wherein the first register further comprises an address of a most recently used entry;</claim-text><claim-text>wherein the intermediate register further comprises an address of a next most recently used entry; and</claim-text><claim-text>wherein the last register comprises an address of a least recently used entry;</claim-text></claim-text><claim-text>(d) a second register for storing the address of the most recently used entry;</claim-text><claim-text>(e) a plurality of entry address encoders comprising N encoders, each encoder comprising:<claim-text>(1) a first input in circuit communication with the data array and for receiving a way select signal from the data array;</claim-text><claim-text>(2) a second input in circuit communication with the addressable content addressable memory and for receiving a write way select signal from the addressable content addressable memory; and</claim-text><claim-text>(3) an output in circuit communication with an entry address bus and for outputting entry address information;</claim-text></claim-text><claim-text>(f) register stack control logic for controlling the N-entry register stack and in circuit communication with the N-entry register stack;</claim-text><claim-text>(g) a wordline NOR circuit in circuit communication with the data array and for indicating whether the data array comprises a given datum of information, the wordline NOR circuit comprising a plurality of wordline inputs in circuit communication with a plurality of wordline outputs from the address content addressable memory;</claim-text><claim-text>(h) a register stack feedback circuit in circuit communication with the register stack control logic and N-entry register stack and for feeding back to the register stack control logic progress of a compare operation executed in the N-entry register stack;</claim-text><claim-text>(i) an entry address driver circuit in circuit communication with the entry address encoders and the N-entry register stack and for communicating the entry address encoders to the N-entry register stack; and</claim-text><claim-text>(j) an entry address bus in circuit communication with the N-entry register stack and the entry address driver circuit and for transmitting return-to-zero entry address to the N-entry register stack.</claim-text></claim-text></claim>"}, {"num": 17, "parent": 16, "type": "dependent", "paragraph_markup": "<claim num=\"17\"><claim-text>17. The architecture of claim 16 wherein the each register further comprises a bit register having:<claim-text>(a) a first latching circuit for storing a true and complement entry address bit;</claim-text><claim-text>(b) a second latching circuit in circuit communication with the first latch and for storing a true and complement entry address bit, wherein the second latching circuit comprises an input and an output; and</claim-text><claim-text>(c) a compare circuit for comparing the output of the second latching circuit to true and complement entry address on the entry address bus.</claim-text></claim-text></claim>"}, {"num": 18, "parent": 16, "type": "dependent", "paragraph_markup": "<claim num=\"18\"><claim-text>18. The architecture of claim 16 wherein the entry address driver circuit comprises:<claim-text>(a) an entry address bit circuit for inputting an entry address;</claim-text><claim-text>(b) an output for outputting an entry address bit; and</claim-text><claim-text>(c) a self-timed reset circuit configured to reset the output as a function of the entry address bit circuit.</claim-text></claim-text></claim>"}, {"num": 19, "parent": 16, "type": "dependent", "paragraph_markup": "<claim num=\"19\"><claim-text>19. The architecture of claim 16 wherein the register stack feedback circuit comprises:<claim-text>(a) a true and complement entry bit input circuit;</claim-text><claim-text>(b) a stack feedback output circuit; and</claim-text><claim-text>(c) a reset circuit in circuit communication with the stack feedback output circuit and comprising a plurality of inverter gates for generating a propagation delay.</claim-text></claim-text></claim>"}, {"num": 20, "parent": -1, "type": "independent", "paragraph_markup": "<claim num=\"20\"><claim-text>20. A cache memory device for handling invalid entry or way data in a least recently used replacement algorithm, the cache memory device comprising:<claim-text>(a) a first register stack for storing address information, the first register stack comprising at least a N and a N+1 next register wherein N is any integer greater than or equal to zero;</claim-text><claim-text>(b) a dynamic entry address encoder for encoding an entry address into true and complement entry addresses;</claim-text><claim-text>(c) a self-timed inverting dynamic entry address inverter driver circuit for generating a self-timed true entry address bus and a self-timed complement entry address bus;</claim-text><claim-text>(d) a dynamic entry address bus in circuit communication with the dynamic entry address encoder and the self-timed inverting dynamic entry address inverter circuit and for transmitting true and complement entry addresses;</claim-text><claim-text>(e) a self-timed first register stack feedback circuit in circuit communication with the self-timed inverting dynamic entry address inverter driver circuit and for measuring the progress of a first register stack compare operation;</claim-text><claim-text>(f) stack control logic in circuit communication with the self-timed first register stack feedback circuit, dynamic entry address encoder and the first register stack and for controlling the first register stack input and output;</claim-text><claim-text>(g) an MRU register in circuit communication with the stack control logic and self-timed inverting dynamic entry address inverter circuit and for storing a most recently used entry address;</claim-text><claim-text>(h) a second register stack for storing address information in circuit communication with the self-timed inverting dynamic entry address inverter circuit; and</claim-text><claim-text>(i) a counter control circuit in circuit communication with the stack control logic and a LRU multiplexer and for controlling the LRU multiplexer.</claim-text></claim-text></claim>"}, {"num": 21, "parent": 20, "type": "dependent", "paragraph_markup": "<claim num=\"21\"><claim-text>21. The cache memory device of claim 20 wherein the first register stack further comprises a bit register having:<claim-text>(a) a first latching circuit for storing a true and complement entry address bit;</claim-text><claim-text>(b) a second latching circuit in circuit communication with the first latch and for storing a true and complement entry address bit, wherein the second latching circuit comprises an input and an output; and</claim-text><claim-text>(c) a compare circuit for comparing the output of the second latching circuit to true and complement entry address bit.</claim-text></claim-text></claim>"}, {"num": 22, "parent": 20, "type": "dependent", "paragraph_markup": "<claim num=\"22\"><claim-text>22. The cache memory device of claim 20 wherein the dynamic entry address encoder comprises a discharge circuit for discharging the dynamic entry address bus wherein the discharge circuit comprising a wordline input.</claim-text></claim>"}, {"num": 23, "parent":