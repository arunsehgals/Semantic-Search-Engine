The memory system uses a main memory comprising a plurality of memory modules each having a plurality of memory planes. The main memory normally interfaces with the remainder of the system via a dual port system cache memory unit, block data transfers between the main memory and the system cache are controlled by a bank controller unit.</p><p>The invention of this particular application involves an instruction processor in which macro-instructions are decoded using a unique programmable read-only-memory means which is capable of decoding instructions of two types, i.e., instructions from a first basic instruction set or instructions from a second extended instruction set, the instruction which is being decoded containing in itself selected bit patterns which uniquely identify which type of instruction is to be decoded. The instruction processor includes means for decoding the operating code portion of an identified instruction for producing operating code designators associated with the decoded instruction and for producing a starting address of one or more microinstructions associated with the decoded instruction.</p><p>The decoded instructions provide the starting address of one or more incroinstructions, which starting address is supplied to a unique microinstruction sequencing unit which appropriately decodes a selected field of each microinstruction for determining the address of the next successive microinstruction, such address being suitably selected from a plurality of microaddress sources.</p><p>The overall system includes means responding to certain macro-instructions which perform unique operations indigenous to the overall system.</p><?BRFSUM description=\"Brief Summary\" end=\"tail\"?><?brief-description-of-drawings description=\"Brief Description of Drawings\" end=\"lead\"?><h4>DESCRIPTION OF THE INVENTION</h4><p>The invention can be described in more detail with the help of the drawings wherein:</p><p>FIG. 1 shows a block diagram of the overall data processing system of the invention as described therein;</p><p>FIG. 2 shows a block diagram of the system cache unit of the system of FIG. 1;</p><p>FIG. 3 shows a block diagram of the bank controller unit of the system of FIG. 1;</p><p>FIG. 4 shows a block diagram of a module of the main memory unit of the system of FIG. 1;</p><p>FIGS. 5-5G show more specific logic for the system cache data store of FIG. 2;</p><p>FIGS. 6-6E show more specific logic for the tag store of FIG. 2;</p><p>FIGS. 7 and 7A show more specific logic for the ICACHE tag store copy unit of FIG. 2;</p><p>FIG. 8 shows more specific logic for the tag store comparator of FIG. 2;</p><p>FIG. 9 shows more specific logic for the ICACHE tag store comparator of FIG. 2;</p><p>FIGS. 10-10B show more specific logic for the CPORT and IPORT address registers and write back tag unit of FIG. 2;</p><p>FIG. 11 shows more specific logic for the index SV and index SV2 units of FIG. 2;</p><p>FIG. 12 shows more specific logic for the WPSV unit of FIG. 2;</p><p>FIGS. 13 and 13A show more specific logic for the index mux and WP mux of FIG. 2;</p><p>FIG. 14 shows more specific logic for the data write register of FIG. 2;</p><p>FIGS. 15-15B show more specific logic for the multiplexer and index driver units of FIG. 2;</p><p>FIGS. 16-16D show more specific logic for the write data register of FIG. 2;</p><p>FIGS. 17 and 17A show more specific logic for the multiplexer unit of FIG. 2;</p><p>FIGS. 18-18G show more specific logic for the driver units and driver logic of FIG. 2;</p><p>FIG. 19 shows more specific logic for the index/index SV comparator of FIG. 2;</p><p>FIGS. 20-20C show more specific logic for the CPU buffer data regiser, I/O buffer data register and CRD IN register of FIG. 2;</p><p>FIGS. 21, 22, 23, 24 and 24A show more specific logic for the system cache parity logic;</p><p>FIG. 26 shows more specific logic for the main memory interface control logic;</p><p>FIGS. 27, 27A, 28-28B show more specific logic for the CBUS interface;</p><p>FIGS. 29, 29A, 30, 30A, 31, 31A, 32, 32A, 33, 34, 34A, 35, 35A, 36, 37, 38, 38A, 39, 40, 41, 41A, 42, 43-43B show various aspects of the system cache control logic for the system cache of FIG. 2;</p><p>FIGS. 44-44B show more specific logic for the mux store unit of FIG. 3;</p><p>FIGS. 45-45C show more specific logic for the C-bit generator of FIG. 3;</p><p>FIGS. 46-46A show more specific logic for the (32-bit) and (8-bit) registers of FIG. 3;</p><p>FIGS. 47 and 47A show more specific logic for the write data bus driver of FIG. 3;</p><p>FIGS. 48-48C show more specific logic for the S-bit generator of FIG. 3;</p><p>FIG. 49 shows more specific logic for the RDSV register of FIG. 3;</p><p>FIG. 50 shows more specific logic for the S-bit SV register of FIG. 3;</p><p>FIGS. 51, 51A, 52-52B show more specific logic for the parity and correction logic of FIG. 3;</p><p>FIGS. 53-53A show more specific logic for direct read driver units of FIG. 3;</p><p>FIGS. 54, 54A show more specific logic for the R/W Mod SEL and RADDR and CADDR units of FIG. 3;</p><p>FIG. 55 shows more specific logic for the mod sel logic of FIG. 3;</p><p>FIGS. 56-56A show more specific logic for the address unit of FIG. 3;</p><p>FIGS. 57-57B show more specific logic for the bank controller and timing logic of FIG. 3;</p><p>FIGS. 58-58F show more specific logic for the bank controller timing, refresh and control logic for the bank controller of FIG. 3;</p><p>FIGS. 59-59A show more specific logic for the parity logic of FIG. 3;</p><p>FIG. 60 shows more specific logic for the control signal drivers of the bank controller of FIG. 3;</p><p>FIGS. 61-61B, 62, 63 and 63A show C Bus interface logic for the bank controller of FIG. 3;</p><p>FIGS. 64-64B, 65-65B show more specific logic for the data-in registers of FIG. 4;</p><p>FIGS. 66-66G and 67-67A show the plane .0. rams and control of FIG. 4;</p><p>FIGS. 68-68G and 69-69A show the plane 1 rams and control of FIG. 4;</p><p>FIGS. 70-70G and 71-71A show the plane 2 rams and control of FIG. 4;</p><p>FIGS. 72-72G and 73-73A show the plane 3 rams and control of FIG. 4;</p><p>FIGS. 74-74D show more specific logic for the data-out register and mux unit of FIG. 4;</p><p>FIG. 75 shows more specific logic for the memory array latches and drivers of FIG. 4;</p><p>FIG. 76 shows more specific logic for the Ram Sel logic of FIG. 4;</p><p>FIG. 77-77C show more specific logic for the Modsel comparator and memory module control logic of FIG. 4;</p><p>FIG. 78 shows more specific logic for the memory module timing logic of FIG.4;</p><p>FIGS. 79-81 show block diagrams which represent the address translation unit of the system of FIG. 1;</p><p>FIGS. 82-82G show more specific logic for various registers and a mux of FIG. 79;</p><p>FIGS. 83 and 83A show more specific logic for the tag store and protection store of FIG. 79;</p><p>FIG. 84 shows more specific logic for the tag comparator unit of FIG. 79;</p><p>FIGS. 85 and 85A show more specific logic for the logical address register of FIG. 79;</p><p>FIGS. 86 and 86A show more specific logic for the physical address offset mux of FIG. 79;</p><p>FIG. 87 shows more specific logic for the LAR CPD driver unit of FIG. 79;</p><p>FIGS. 88 and 88A show the physical address drivers of FIG. 79;</p><p>FIG. 89 shows the input priority encoder for use in the ATU of FIG. 79;</p><p>FIG. 90 shows the fault cache drivers of FIG. 79;</p><p>FIGS. 91-91B shows more specific logic for the ring protection logic of FIG. 80;</p><p>FIGS. 92-92D show more specific logic for fault detection and cache block crossing trap logic of FIG. 79;</p><p>FIGS. 93-93G show more specific logic for the fault detection trap logic of FIG. 79;</p><p>FIGS. 94 and 94A show more specific logic for the validity store and purge logic of FIG. 79;</p><p>FIG. 95 shows more specific logic for the translation register of FIG. 79;</p><p>FIGS. 96-96D show more specific logic for the reference/modify storage and control logic of FIG. 79;</p><p>FIG. 97 shows more specific logic for state save drivers of FIG. 79;</p><p>FIGS. 98-98G show more specific logic for the 16-bit M M P U emulation control logic of FIG. 79;</p><p>FIGS. 99-99A show more specific logic for ATU timing logic for use with the ATU of FIG. 79;</p><p>FIGS. 100-100C show more specific logic for permitting the ATU to interface with the system cache unit of the system;</p><p>FIGS. 101-106 show block diagrams which represent the instruction processor unit of the system of FIG. 1;</p><p>FIGS. 107-107C show more specific logic for the ICACHE data store of FIG. 102;</p><p>FIG. 108 shows more specific logic for the ICACHE data store address unit of FIG. 106;</p><p>FIGS. 109-109C show more specific logic for the CPM register of FIG. 102;</p><p>FIG. 110 shows more specific logic for the ICACHE validity store of FIG. 102;</p><p>FIG. 111 shows more specific logic for the validity store address input of FIG. 102;</p><p>FIG. 112 shows more specific logic for the comparator and Set IDR valid units of FIG. 102;</p><p>FIGS. 113-113C show more specific logic for the IDR shifter unit of FIG. 103;</p><p>FIGS. 114-114B show more specific logic for the IDR unit of FIG. 103;</p><p>FIG. 115 shows more specific logic for the IDR unit of FIG. 103;</p><p>FIGS. 116 and 116A show more specific logic for the ICACHE pointer logic of FIG. 106;</p><p>FIG. 117 shows more specific logic for the ICP LA drivers of FIG. 106;</p><p>FIG. 118 shows more specific logic for the request control logic of FIG. 106;</p><p>FIG. 119 shows more specific logic for the physical translation register of FIG. 106;</p><p>FIGS 120-120A show control logic for use with the ICACHE of FIG. 102;</p><p>FIG. 121 shows the CPD drivers of FIG. 103;</p><p>FIG. 122-122D show more specific logic for the instruction pre-decode logic of FIG. 103;</p><p>FIGS. 123-123E show more specific logic for the decode PROM'S of FIG. 103;</p><p>FIGS. 124-124E show more specific logic for the ST\u03bcAD load control logic of FIG. 103;</p><p>FIGS. 125-125A show more specific logic for the displacenent mux at the input to the displacement logic of FIG. 104;</p><p>FIGS. 126-126C show more specific logic for the displacement mux at the input to the displacement logic of FIG. 104;</p><p>FIG. 127 shows more specific logic for the SEX logic of FIG. 104;</p><p>FIG. 128 shows more specific logic for the zero/ones extend logic of FIG. 104;</p><p>FIGS. 129-129A show more specific logic for the displacement/increment buffer of FIG. 104;</p><p>FIGS. 130-130A show more specific logic for the displacement latch and drivers of FIG. 104;</p><p>FIGS. 131-131B show more specific logic for the PC register and CPD bus drivers of FIG. 104;</p><p>FIGS. 132-132C show more specific logic for the adder of FIG. 104;</p><p>FIGS. 133-133A show more specific logic for the PC and displacement latches and drivers of FIG. 104;</p><p>FIG. 134 shows more specific logic for the PC clock of FIG. 104;</p><p>FIGS. 135-135C show timing and control logic for use with the instruction processor of FIGS. 101-106;</p><p>FIGS. 136-136D show interface logic which permits the instruction processor to interface with the system cache unit of the system;</p><p>FIGS. 137 and 138 show block diagrams of the microsequencer unit of the system of FIG. 1;</p><p>FIGS. 139-139D show more specific logic for the stack mux, stack ram, stack pointer and TOS unit of FIG. 137;</p><p>FIG. 140 shows more specific logic for the STOS unit of FIG. 137;</p><p>FIGS. 141-141B show more specific logic for the address mux of FIG. 137;</p><p>FIG. 142 shows more specific logic for the address save register of FIG. 137;</p><p>FIGS. 143 and 143A show more specific logic for the address input to the microcontrol store unit of FIG. 137;</p><p>FIG. 144 shows more specific logic for the starting microaddress driver of FIG. 137;</p><p>FIG. 145 shows more specific logic for the (\u03bcPC+1) and increment unit of FIG. 137;</p><p>FIGS. 146-146F, 146.1-146.1F, 146.2-146.2F, 146.3-146.3F, 146.4-146.4E, 146.5-146.5E, 146.6-146.6F and 146.7-146.7F show more specific logic for the microcontrol store of FIG. 137;</p><p>FIGS. 147-147D show more specific logic for the NAC decode logic of FIG. 137;</p><p>FIGS. 148-148A show more specific logic for the parity logic of FIG. 137;</p><p>FIGS. 149-149B show more specific logic for the concatenation logic and the dispatch mux of FIG. 138;</p><p>FIGS. 150-150A show more specific logic for the dispatch mux of FIG. 138;</p><p>FIG. 151 shows more specific logic for the 6-Bit counter of FIG. 138;</p><p>FIGS. 152-152A show more specific logic for the 8 Flags unit of FIG. 138;</p><p>FIGS. 153-153A show more specific logic for the test 0 and test 1 muxes and the condition mux of FIG. 138;</p><p>FIG. 154 shows a block diagram of a representative arithmetic logic unit of the system of FIG. 1;</p><p>FIG. 155 shows a diagrammatic representation of certain memory locations used to explain the operation of a particular macro-instruction used in the system of FIG. 1; and</p><p>FIG. 156 shows a diagrammatic representation of certain operations performed in the macro-instruction discussed with reference to FIG. 155.</p><p>FIG. 157 depicts a diagram showing a one-level page table transversal in a long address translation; and</p><p>FIG. 158 shows a diagram of a two-level page table transversal in a long address translation.</p><p>In connection with the above figures, where a particular figure requires more than one sheet of drawings, each subsequent sheet is designated by the same figure number with sequential letters appended thereto (e.g., FIG. 5 (for sheet 1); FIG. 5A (for sheet 2); FIG. 5B (for sheet 3) . . . etc.). With respect to FIG. 146 in particular, which depicts the micr